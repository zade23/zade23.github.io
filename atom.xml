<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ANdRoid&#39;s BLOG</title>
  
  <subtitle>MaTRix</subtitle>
  <link href="https://zade23.github.io/atom.xml" rel="self"/>
  
  <link href="https://zade23.github.io/"/>
  <updated>2023-10-18T08:20:18.738Z</updated>
  <id>https://zade23.github.io/</id>
  
  <author>
    <name>Android</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python元组集合字典</title>
    <link href="https://zade23.github.io/2023/10/18/Python%E5%85%83%E7%BB%84%E9%9B%86%E5%90%88%E5%AD%97%E5%85%B8/"/>
    <id>https://zade23.github.io/2023/10/18/Python%E5%85%83%E7%BB%84%E9%9B%86%E5%90%88%E5%AD%97%E5%85%B8/</id>
    <published>2023-10-18T08:20:18.000Z</published>
    <updated>2023-10-18T08:20:18.738Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Python字符串</title>
    <link href="https://zade23.github.io/2023/10/18/Python%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://zade23.github.io/2023/10/18/Python%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2023-10-18T08:18:06.000Z</published>
    <updated>2023-10-18T08:40:42.964Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#1-%E5%AD%97%E7%AC%A6%E4%B8%8E%E6%95%B4%E6%95%B0%E7%9A%84%E8%81%94%E7%B3%BBascii%E7%A0%81">1. 字符与整数的联系——ASCII码</a></li><li><a href="#2-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E7%9A%84%E5%86%99%E6%B3%95">2. 字符串常量的写法</a></li><li><a href="#3-%E8%A1%A8%E7%A4%BA%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E8%BD%AC%E4%B9%89">3. 表示特殊字符——转义</a></li><li><a href="#4-%E8%AE%BF%E9%97%AE%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E6%AF%8F%E4%B8%AA%E5%AD%97%E7%AC%A6">4. 访问字符串中的每个字符</a></li><li><a href="#5-%E4%BD%BF%E7%94%A8%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E9%81%8D%E5%8E%86%E5%AD%97%E7%AC%A6%E4%B8%B2">5. 使用循环语句遍历字符串</a></li><li><a href="#6-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%88%87%E7%89%87%E6%93%8D%E4%BD%9C">6. 字符串的切片操作</a></li><li><a href="#7-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%A4%8D%E5%88%B6">7. 字符串的复制</a></li><li><a href="#8-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E8%BF%90%E7%AE%97">8. 字符串的运算</a></li><li><a href="#9-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C">9. 字符串的常用操作</a></li><li><a href="#10-%E6%9B%B4%E5%A4%8D%E6%9D%82%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA">10. 更复杂的格式化输出</a></li><li><a href="#11-%E4%BD%9C%E4%B8%9A%E9%A2%98%E6%89%A9%E5%B1%95%E5%86%85%E5%AE%B9">11. 作业题扩展内容</a></li></ul><hr><h3 id="1-字符与整数的联系——ASCII码"><a href="#1-字符与整数的联系——ASCII码" class="headerlink" title="1. 字符与整数的联系——ASCII码"></a>1. 字符与整数的联系——ASCII码</h3><p>每个常用字符都对应一个-128 ~ 127的数字，二者之间可以相互转化。注意：目前负数没有与之对应的字符。</p><ul><li><p>ord()函数可以求一个字符的ASCII码。注意输入是一个字符，而不是字符串。</p></li><li><p>chr()函数可以将一个ASCII码转化成对应的字符。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(c))</span><br><span class="line"></span><br><span class="line">a = <span class="number">66</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(a))</span><br></pre></td></tr></table></figure><p>常用ASCII值：<code>&#39;A&#39;- &#39;Z&#39;</code>是<code>65 ~ 90</code>，<code>&#39;a&#39; - &#39;z&#39;</code>是<code>97 - 122</code>，<code>0 - 9</code>是<code>48 - 57</code>。</p><p><strong>注意</strong>：虽然字符可以跟整数相互转化，但在Python中，字符不能参与数值运算，这一点跟C++、Java等语言是不同的。</p><hr><h3 id="2-字符串常量的写法"><a href="#2-字符串常量的写法" class="headerlink" title="2. 字符串常量的写法"></a>2. 字符串常量的写法</h3><p>在Python中，字符串既可以用单引号来表示，也可以用双引号来表示，二者完全相同。<br>这一点跟C++、Java等编程语言是不同的，在这些编程语言中，用单引号来表示字符，用双引号来表示字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;Hello World&quot;</span>  <span class="comment"># 双引号写法</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">b = <span class="string">&#x27;Hello World&#x27;</span>  <span class="comment"># 单引号写法</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><p>两个或多个字符串常量并排写，会被自动合并，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;My &quot;</span> <span class="string">&quot;name &quot;</span> <span class="string">&quot;is yxc.&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出：My name is yxc.</span></span><br></pre></td></tr></table></figure><p>一个字符串如果包含多行，可以采用<code>&quot;&quot;&quot;...&quot;&quot;&quot;</code>或者<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>的初始化方式，字符串中将自动包含回车字符，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;&quot;&quot;Usage: thingy [OPTIONS]</span></span><br><span class="line"><span class="string">     -h                        Display this usage message</span></span><br><span class="line"><span class="string">     -H hostname               Hostname to connect to&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p>会得到如下输出：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Usage: thingy [OPTIONS]</span><br><span class="line">     -h                        Display this usage message</span><br><span class="line">     -H hostname               Hostname to connect to</span><br></pre></td></tr></table></figure><h3 id="3-表示特殊字符——转义"><a href="#3-表示特殊字符——转义" class="headerlink" title="3. 表示特殊字符——转义"></a>3. 表示特殊字符——转义</h3><p>当想在字符串中表示特殊字符时，一般可以在字符前加反斜杠<code>\</code>。</p><p>常见需要转义的字符有：</p><table><thead><tr><th>转义字符</th><th>含义</th><th>ASCII码（十进制）</th></tr></thead><tbody><tr><td><code>\n</code></td><td>回车</td><td>10</td></tr><tr><td>``</td><td>代表一个反斜杠<code>\</code></td><td>92</td></tr><tr><td>`“&#96;</td><td>表示一个双引号</td><td>34</td></tr><tr><td>`‘&#96;</td><td>表示一个单引号</td><td>39</td></tr></tbody></table><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My name is:\n\&quot;yxc!\&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>会得到如下输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">My name <span class="keyword">is</span>:</span><br><span class="line"><span class="string">&quot;yxc!&quot;</span></span><br></pre></td></tr></table></figure><p>另外，如果想输出单引号，也可以用双引号来表示，反之亦然。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My name is &#x27;yxc!&#x27;&quot;</span>)  <span class="comment"># 输出：My name is &#x27;yxc!&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;My name is &quot;yxc!&quot;&#x27;</span>)  <span class="comment"># 输出：My name is &quot;yxc!&quot;</span></span><br></pre></td></tr></table></figure><h3 id="4-访问字符串中的每个字符"><a href="#4-访问字符串中的每个字符" class="headerlink" title="4. 访问字符串中的每个字符"></a>4. 访问字符串中的每个字符</h3><p>可以通过下标读取字符串中的每个字符，下标从0开始，也可以是负数，负数下标表示的是除以字符串长度的余数对应的位置。</p><p>负数下标相当于将字符串首位相接，然后从0往前数。</p><p>如果字符串长度是 nn，那么下标只能取 −n∼n−1−n∼n−1 之间的整数，超出范围会报错。</p><p><strong>注意</strong>：字符串中的每个字符不能修改。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;Hello World&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>], <span class="built_in">ord</span>(a[<span class="number">5</span>]))  <span class="comment"># 输出H 32</span></span><br><span class="line"></span><br><span class="line">a[<span class="number">2</span>] = <span class="string">&#x27;x&#x27;</span>  <span class="comment"># 会报错，字符串不能修改</span></span><br></pre></td></tr></table></figure><h3 id="5-使用循环语句遍历字符串"><a href="#5-使用循环语句遍历字符串" class="headerlink" title="5. 使用循环语句遍历字符串"></a>5. 使用循环语句遍历字符串</h3><p>可以通过下标访问，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;acwing&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    <span class="built_in">print</span>(s[i], end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()  <span class="comment"># 输出回车</span></span><br></pre></td></tr></table></figure><p>可以通过<code>for ... in ...</code>直接遍历，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">&quot;python&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(c, end=<span class="string">&#x27; &#x27;</span>)  <span class="comment"># 注意c本身也是字符串类型</span></span><br><span class="line"><span class="built_in">print</span>()  <span class="comment"># 输出回车</span></span><br></pre></td></tr></table></figure><h3 id="6-字符串的切片操作"><a href="#6-字符串的切片操作" class="headerlink" title="6. 字符串的切片操作"></a>6. 字符串的切片操作</h3><p>字符串的切片操作会返回一个新字符串。用法：</p><ul><li><code>a[begin:end]</code> 会返回包含<code>a[begin], a[begin + 1], ..., a[end - 1]</code>的字符串。</li><li>省略<code>begin</code>时，<code>begin</code>的默认值是0。</li><li>省略<code>end</code>时，<code>end</code>的默认值是字符串长度。</li><li>如果<code>begin</code>或<code>end</code>是负数，表示的是除以字符串长度后的余数。</li></ul><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;ABCDE&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>:<span class="number">4</span>])  <span class="comment"># 输出BCD</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>:])  <span class="comment"># 输出BCDE</span></span><br><span class="line"><span class="built_in">print</span>(a[:<span class="number">4</span>])  <span class="comment"># 输出ABCD</span></span><br><span class="line"><span class="built_in">print</span>(a[:])  <span class="comment"># 输出ABCDE</span></span><br><span class="line"><span class="built_in">print</span>(a[-<span class="number">4</span>:-<span class="number">1</span>])  <span class="comment"># 等价于print(a[1:4])</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：字符串的切片不支持写操作。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;ABCDE&quot;</span></span><br><span class="line">a[<span class="number">1</span>:<span class="number">4</span>] = <span class="string">&quot;XY&quot;</span>  <span class="comment"># 会报错，字符串不能修改</span></span><br></pre></td></tr></table></figure><h3 id="7-字符串的复制"><a href="#7-字符串的复制" class="headerlink" title="7. 字符串的复制"></a>7. 字符串的复制</h3><p>跟列表不同，字符串的每次复制操作，都会得到一个全新的字符串。</p><h3 id="8-字符串的运算"><a href="#8-字符串的运算" class="headerlink" title="8. 字符串的运算"></a>8. 字符串的运算</h3><ul><li>字符串的加法可以将两个字符串拼接起来，得到一个新字符串。</li><li>字符串乘以一个整数，可以将若干个自身拼接起来，得到一个新字符串。</li><li>字符串支持比较运算符，按字典序比较大小。即如果两个字符串相同，则表示相等；否则找到两个字符串从左到右数第一个不一样的字符，哪个字符串的字符的ASCII码小，哪个字符串的字典序就小；另外空字符比任何字符都小。</li></ul><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;Hello &quot;</span></span><br><span class="line">b = <span class="string">&quot;World&quot;</span></span><br><span class="line">c = a + b</span><br><span class="line"><span class="built_in">print</span>(c)  <span class="comment"># 输出Hello World</span></span><br><span class="line"></span><br><span class="line">d = a * <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(d)  <span class="comment"># 输出Hello Hello Hello</span></span><br><span class="line"></span><br><span class="line">e = a * <span class="number">3</span> + <span class="string">&quot;World&quot;</span></span><br><span class="line"><span class="built_in">print</span>(e)  <span class="comment"># 输出Hello Hello Hello World</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a &lt;= b)  <span class="comment"># 按字典序比较大小，输出True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;123&quot;</span> &gt; <span class="string">&quot;22&quot;</span>)  <span class="comment"># 按字典序比较大小，输出False</span></span><br></pre></td></tr></table></figure><h3 id="9-字符串的常用操作"><a href="#9-字符串的常用操作" class="headerlink" title="9. 字符串的常用操作"></a>9. 字符串的常用操作</h3><p>假设<code>s</code>是一个字符串，则：</p><ul><li><p><code>len(s)</code>返回字符串长度。</p></li><li><p><code>s.split(sep)</code>返回一个字符串列表。如果给出了<code>sep</code>就按<code>sep</code>分隔；如果没给出，则会按空格分隔，但连续的空格会被视为单个分隔符，而且会忽略首尾的空白字符。</p></li><li><p><code>s.strip()</code>将首尾的空白字符删除。</p></li><li><p><code>s.replace(old, new)</code>将<code>s</code>中所有的<code>old</code>子串都改成<code>new</code>。</p></li><li><p><code>s.find(&quot;abc&quot;)</code>查询某个子串在<code>s</code>中第一次出现的下标；如果不存在，则返回-1。</p></li><li><p><code>s.startswith(prefix)</code>判断<code>prefix</code>是否为<code>s</code>的前缀。</p></li><li><p><code>s.endswith(suffix)</code>判断<code>suffix</code>是否为<code>s</code>的后缀。</p></li><li><p><code>s.lower()</code>将所有大写字母变成小写。</p></li><li><p><code>s.upper()</code>将所有小写字母变成大写。</p></li><li><p><code>s.join(a)</code>，<code>a</code>是一个字符串列表，这个函数返回将a中的字符用<code>s</code>作为分隔符拼接起来的结果。</p></li></ul><p><strong>注意</strong>：返回的所有字符串都是新字符串，原字符串不变。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&quot;abc def xyz&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(s1))  <span class="comment"># 输出11</span></span><br><span class="line"><span class="built_in">print</span>(s1.split())  <span class="comment"># 输出[&#x27;abc&#x27;, &#x27;def&#x27;, &#x27;xyz&#x27;]</span></span><br><span class="line"></span><br><span class="line">s2 = <span class="string">&quot;  abc abc  &quot;</span></span><br><span class="line"><span class="built_in">print</span>(s2.strip())  <span class="comment"># 输出abc abc</span></span><br><span class="line"><span class="built_in">print</span>(s2.replace(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;*&quot;</span>))  <span class="comment"># 输出  * *</span></span><br><span class="line"><span class="built_in">print</span>(s2.find(<span class="string">&quot;abc&quot;</span>), s2.find(<span class="string">&quot;xyz&quot;</span>))  <span class="comment"># 输出2 -1</span></span><br><span class="line"></span><br><span class="line">s3 = <span class="string">&quot;Abc deF&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s3.startswith(<span class="string">&quot;Ab&quot;</span>))  <span class="comment"># 输出True</span></span><br><span class="line"><span class="built_in">print</span>(s3.endswith(<span class="string">&quot;deF&quot;</span>))  <span class="comment"># 输出True</span></span><br><span class="line"><span class="built_in">print</span>(s3.lower())  <span class="comment"># 输出abc def</span></span><br><span class="line"><span class="built_in">print</span>(s3.upper())  <span class="comment"># 输出ABC DEF</span></span><br><span class="line"></span><br><span class="line">s4 = <span class="string">&quot;, &quot;</span></span><br><span class="line">a = [<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(s4.join(a))  <span class="comment"># 输出aa, bb, cc</span></span><br></pre></td></tr></table></figure><h3 id="10-更复杂的格式化输出"><a href="#10-更复杂的格式化输出" class="headerlink" title="10. 更复杂的格式化输出"></a>10. 更复杂的格式化输出</h3><p>当需要用到更复杂的格式化输出时，现查即可。可以参考：</p><ul><li><a href="https://docs.python.org/zh-cn/3/tutorial/inputoutput.html#formatted-string-literals">更复杂的输出格式</a></li><li><a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#old-string-formatting">printf 风格的字符串格式化</a></li></ul><h3 id="11-作业题扩展内容"><a href="#11-作业题扩展内容" class="headerlink" title="11. 作业题扩展内容"></a>11. 作业题扩展内容</h3><ol><li>作业的评测器会自动忽略每一行的行末空格，所以行末输出多余空格也视为正确。</li><li><code>s.isdigit()</code>：当字符串<code>s</code>不是空字符串，且包含的所有字符都是数字时返回True，否则返回False。</li><li><code>a, b = [&quot;abc&quot;, &quot;def&quot;]</code>这种写法可以将<code>&quot;abc&quot;</code>赋值给第一个变量<code>a</code>，将<code>&quot;def&quot;</code>赋值给第二个变量<code>b</code>。</li><li><code>s.rfind(&quot;abc&quot;)</code>查询某个子串在<code>s</code>中最后一次出现的下标；如果不存在，则返回-1。</li><li>当不知道读入的具体行数时，可以采用如下方法一次性读取所有行：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> stdin</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> stdin.readlines():</span><br><span class="line">    <span class="built_in">print</span>(line.strip())  <span class="comment"># strip()是为了去掉行末的回车</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%E5%AD%97%E7%AC%A6%E4%B8%8E%E6%95%B4%E6%95%B0%E7%9A%84%E8%81%94%E7%B3%BBascii%E7%A0%81&quot;&gt;1. 字符与整数的联系——ASCII码&lt;/a&gt;&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>学习笔记——PyTorch源码教程与前沿人工智能算法复现讲解</title>
    <link href="https://zade23.github.io/2023/10/16/PyTorch%E6%BA%90%E7%A0%81%E6%95%99%E7%A8%8B%E4%B8%8E%E5%89%8D%E6%B2%BF%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95%E5%A4%8D%E7%8E%B0%E8%AE%B2%E8%A7%A3/"/>
    <id>https://zade23.github.io/2023/10/16/PyTorch%E6%BA%90%E7%A0%81%E6%95%99%E7%A8%8B%E4%B8%8E%E5%89%8D%E6%B2%BF%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95%E5%A4%8D%E7%8E%B0%E8%AE%B2%E8%A7%A3/</id>
    <published>2023-10-16T06:47:15.000Z</published>
    <updated>2023-10-18T08:17:38.401Z</updated>
    
    <content type="html"><![CDATA[<p>学习笔记目录</p><hr><h1 id="第一章-Pytorch介绍和Tensor的创建"><a href="#第一章-Pytorch介绍和Tensor的创建" class="headerlink" title="第一章 Pytorch介绍和Tensor的创建"></a>第一章 Pytorch介绍和Tensor的创建</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;学习笔记目录&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;第一章-Pytorch介绍和Tensor的创建&quot;&gt;&lt;a href=&quot;#第一章-Pytorch介绍和Tensor的创建&quot; class=&quot;headerlink&quot; title=&quot;第一章 Pytorch介绍和Tensor的创建&quot;&gt;&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>经济学——流动性陷阱</title>
    <link href="https://zade23.github.io/2023/10/16/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E2%80%94%E2%80%94%E6%B5%81%E5%8A%A8%E6%80%A7%E9%99%B7%E9%98%B1/"/>
    <id>https://zade23.github.io/2023/10/16/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E2%80%94%E2%80%94%E6%B5%81%E5%8A%A8%E6%80%A7%E9%99%B7%E9%98%B1/</id>
    <published>2023-10-16T02:37:26.000Z</published>
    <updated>2023-10-16T02:37:51.085Z</updated>
    
    
    
    
    
    <category term="经济学小知识" scheme="https://zade23.github.io/tags/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Python函数</title>
    <link href="https://zade23.github.io/2023/10/12/Python%E5%87%BD%E6%95%B0/"/>
    <id>https://zade23.github.io/2023/10/12/Python%E5%87%BD%E6%95%B0/</id>
    <published>2023-10-12T10:22:54.000Z</published>
    <updated>2023-10-18T08:18:10.458Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#1-%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80">1. 函数基础</a><ul><li><a href="#11-%E7%BC%96%E5%86%99%E5%87%BD%E6%95%B0">1.1 编写函数</a></li><li><a href="#12-%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0">1.2 调用函数</a></li><li><a href="#13-%E5%BD%A2%E5%8F%82%E5%92%8C%E5%AE%9E%E5%8F%82">1.3 形参和实参</a><ul><li><a href="#131-%E5%BD%A2%E5%8F%82%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%B9%E5%BC%8F">1.3.1 形参的初始化方式</a></li><li><a href="#132-%E5%B8%A6%E9%BB%98%E8%AE%A4%E5%80%BC%E7%9A%84%E5%BD%A2%E5%8F%82">1.3.2 带默认值的形参</a></li><li><a href="#133-%E5%85%B6%E5%AE%83%E5%8F%82%E6%95%B0%E5%86%99%E6%B3%95">1.3.3 其它参数写法</a></li></ul></li><li><a href="#14-%E5%8F%98%E9%87%8F%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F">1.4 变量的作用域</a></li></ul></li><li><a href="#2-%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92">2. 参数传递</a><ul><li><a href="#21-%E5%80%BC%E4%BC%A0%E9%80%92">2.1 值传递</a></li><li><a href="#22-%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92">2.2 引用传递</a></li></ul></li><li><a href="#3return%E8%AF%AD%E5%8F%A5">3.<code>return</code>语句</a></li><li><a href="#4lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F">4.<code>lambda</code>表达式</a></li><li><a href="#5-%E5%87%BD%E6%95%B0%E9%80%92%E5%BD%92">5. 函数递归</a></li></ul><hr><p>Python中函数的用法非常多，<u><strong>80%的用法不常用，20%的用法常用</strong></u>。大家不要把精力浪费在背完所有用法上，而要把主要精力放到最常用的20%的用法和代码逻辑上，至于另外80%不常用的用法，边用边查就行。</p><h3 id="1-函数基础"><a href="#1-函数基础" class="headerlink" title="1. 函数基础"></a>1. 函数基础</h3><p>Python中一个典型的函数定义包括以下部分：关键字<code>def</code>、函数名称、由0个或多个形参组成的列表以及函数体。</p><h4 id="1-1-编写函数"><a href="#1-1-编写函数" class="headerlink" title="1.1 编写函数"></a>1.1 编写函数</h4><p>我们来编写一个求阶乘的函数。例如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fact</span>(<span class="params">n</span>):</span><br><span class="line">    res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        res *= i</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>函数名称是<code>fact</code>，给它传入一个<code>n</code>，会返回<code>n</code>的阶乘。<code>return</code>语句负责结束函数并返回<code>res</code>的值。</p><h4 id="1-2-调用函数"><a href="#1-2-调用函数" class="headerlink" title="1.2 调用函数"></a>1.2 调用函数</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我们要计算5的阶乘，答案是：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(fact(<span class="number">5</span>))  <span class="comment"># 输出 120</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;计算结束啦！&quot;</span>)</span><br></pre></td></tr></table></figure><p>函数的调用完成两项工作：</p><ul><li>用实参初始化函数对应的形参</li><li>将控制权转移给被调用的函数</li></ul><p>此时，代码原本的执行顺序被暂时中断，被调函数开始执行。等被调用函数执行完后，再继续执行之前的代码。</p><h4 id="1-3-形参和实参"><a href="#1-3-形参和实参" class="headerlink" title="1.3 形参和实参"></a>1.3 形参和实参</h4><p>实参指调用函数时传入的变量或常量，形参指定义函数时参数列表里的变量。</p><p>形参列表可以为空，例如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line"></span><br><span class="line">f()  <span class="comment"># 输出 Hello World</span></span><br></pre></td></tr></table></figure><h5 id="1-3-1-形参的初始化方式"><a href="#1-3-1-形参的初始化方式" class="headerlink" title="1.3.1 形参的初始化方式"></a>1.3.1 形参的初始化方式</h5><p>调用函数时会用实参去初始化形参，初始化的顺序有两种：</p><p>第一种是用位置实参来初始化形参。顾名思义，实参会按位置关系来初始化形参，第一个实参初始化第一个形参，第二个实参初始化第二个形参，依此类推。形参和实参的个数必须匹配。例如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a, b, c, d</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a =&quot;</span>, a, end=<span class="string">&quot;, &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;b =&quot;</span>, b, end=<span class="string">&quot;, &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c, end=<span class="string">&quot;, &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;d =&quot;</span>, d)</span><br><span class="line"></span><br><span class="line">f(<span class="number">1</span>, <span class="literal">True</span>, <span class="string">&quot;Python&quot;</span>, <span class="number">4.2</span>)  <span class="comment"># 输出 a = 1, b = True, c = Python, d = 4.2</span></span><br><span class="line">f(<span class="number">1</span>, <span class="literal">True</span>, <span class="string">&quot;Python&quot;</span>, <span class="number">4.2</span>, <span class="number">3</span>)  <span class="comment"># 会报错，因为实参个数多于形参</span></span><br><span class="line">f(<span class="number">1</span>, <span class="literal">True</span>, <span class="string">&quot;Python&quot;</span>)  <span class="comment"># 会报错，因为实参个数少于形参</span></span><br></pre></td></tr></table></figure><p>第二种是用关键字实参来初始化形参。此时实参不再按位置关系来初始化形参，而是按变量名初始化。例如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># f()的定义如上所述</span></span><br><span class="line">f(b=<span class="number">1</span>, c=<span class="literal">True</span>, a=<span class="string">&quot;Python&quot;</span>, d=<span class="number">4.2</span>)  <span class="comment"># 输出 a = Python, b = 1, c = True, d = 4.2</span></span><br></pre></td></tr></table></figure><p>两种方式也可以混合使用，但是位置实参一定要放到关键字实参之前。例如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># f()的定义如上所述</span></span><br><span class="line">f(<span class="number">1</span>, <span class="number">2</span>, d=<span class="string">&quot;Python&quot;</span>, c=<span class="number">4.2</span>)  <span class="comment"># 输出 a = 1, b = 2, c = 4.2, d = Python</span></span><br><span class="line">f(<span class="number">1</span>, b=<span class="number">3</span>, <span class="string">&quot;Python&quot;</span>, d=<span class="number">4.2</span>)  <span class="comment"># 会报错，因为位置实参位于关键字实参后面了。</span></span><br></pre></td></tr></table></figure><h5 id="1-3-2-带默认值的形参"><a href="#1-3-2-带默认值的形参" class="headerlink" title="1.3.2 带默认值的形参"></a>1.3.2 带默认值的形参</h5><p>形参也可以设置默认值，但所有带默认值的形参必须是最后几个。当某些形参没有被初始化时，这些形参会使用默认值。例如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a, b, c=<span class="number">3</span>, d=<span class="string">&quot;Python&quot;</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a =&quot;</span>, a, end=<span class="string">&quot;, &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;b =&quot;</span>, b, end=<span class="string">&quot;, &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c, end=<span class="string">&quot;, &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;d =&quot;</span>, d)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># c和d没有被初始化，采用默认值。输出 a = 1, b = 2, c = 3, d = Python</span></span><br><span class="line">f(<span class="number">1</span>, b=<span class="number">2</span>, d=<span class="string">&quot;AcWing&quot;</span>)  <span class="comment"># c没有被初始化，采用默认值。输出 a = 1, b = 2, c = 3, d = AcWing</span></span><br></pre></td></tr></table></figure><h5 id="1-3-3-其它参数写法"><a href="#1-3-3-其它参数写法" class="headerlink" title="1.3.3 其它参数写法"></a>1.3.3 其它参数写法</h5><p>其它参数写法用得不多，想了解的同学可以参考<a href="https://docs.python.org/zh-cn/3/tutorial/controlflow.html#more-on-defining-functions">函数定义详解</a>。</p><h4 id="1-4-变量的作用域"><a href="#1-4-变量的作用域" class="headerlink" title="1.4 变量的作用域"></a>1.4 变量的作用域</h4><p>函数内定义的变量为局部变量，只能在函数内部使用。</p><p>当需要修改用全局变量时，需要用<code>global</code>关键字在函数内声明全局变量。例如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="keyword">global</span> x  <span class="comment"># 在函数内声明全局变量</span></span><br><span class="line">    x = <span class="number">666</span></span><br><span class="line">    y = <span class="number">777</span></span><br><span class="line">    <span class="built_in">print</span>(x, y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f()  <span class="comment"># 输出 666 777</span></span><br><span class="line"><span class="built_in">print</span>(x)  <span class="comment"># 会发现全局变量x也被修改了</span></span><br><span class="line"><span class="built_in">print</span>(y)  <span class="comment"># 会报错，因为y是局部变量，函数外无法使用</span></span><br></pre></td></tr></table></figure><p>1.5 嵌套定义函数<br>函数内部也可以定义函数。例如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">g</span>(<span class="params">x</span>):  <span class="comment"># 定义函数g()</span></span><br><span class="line">        x += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line">    g(<span class="number">5</span>)  <span class="comment"># 调用函数g()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f()  <span class="comment"># 输出6</span></span><br></pre></td></tr></table></figure><p>1.6 <code>pass</code>语句<br>当函数定义完但还不想实现时，可以用<code>pass</code>占位符，来避免出现语法错误。例如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="2-参数传递"><a href="#2-参数传递" class="headerlink" title="2. 参数传递"></a>2. 参数传递</h3><h4 id="2-1-值传递"><a href="#2-1-值传递" class="headerlink" title="2.1 值传递"></a>2.1 值传递</h4><p><code>int</code>、<code>float</code>、<code>bool</code>、字符串等采用值传递。</p><p>将实参的初始值拷贝给形参。此时，对形参的改动不会影响实参的初始值。例如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">y</span>):</span><br><span class="line">    y = <span class="number">5</span></span><br><span class="line">    <span class="built_in">print</span>(y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = <span class="number">10</span></span><br><span class="line">f(x)</span><br><span class="line"><span class="built_in">print</span>(x)  <span class="comment"># 会发现x的值没变</span></span><br></pre></td></tr></table></figure><h4 id="2-2-引用传递"><a href="#2-2-引用传递" class="headerlink" title="2.2 引用传递"></a>2.2 引用传递</h4><p>列表采用引用传递。</p><p>将实参的引用传给形参，此时对形参的修改会影响实参的初始值。例如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">b</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(b)):</span><br><span class="line">        b[i] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">f(a)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 会发现列表a中的每个数加了1</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-return语句"><a href="#3-return语句" class="headerlink" title="3.return语句"></a>3.<code>return</code>语句</h3><p>return语句终止当前正在执行的函数并将控制权返回到调用该函数的地方，并返回结果。例如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span>  <span class="comment"># 不写返回值时，会返回None</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>  <span class="comment"># 返回一个变量</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span>, <span class="number">5</span>  <span class="comment"># 返回多个变量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = f(<span class="number">1</span>)</span><br><span class="line">b = f(<span class="number">2</span>)</span><br><span class="line">c, d = f(<span class="number">3</span>)</span><br><span class="line">e = f(<span class="number">4</span>)  <span class="comment"># 没写return时，也会返回None</span></span><br><span class="line"><span class="built_in">print</span>(a, b, c, d, e)  <span class="comment"># 输出 None 3 4 5 None</span></span><br></pre></td></tr></table></figure><hr><h3 id="4-lambda表达式"><a href="#4-lambda表达式" class="headerlink" title="4.lambda表达式"></a>4.<code>lambda</code>表达式</h3><p>lambda关键字可以创建匿名函数，目的是为了简化代码。可以对比下面两种写法，会发现lambda表达式的写法更短一些。</p><p>常与sort()函数配合使用，例如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pairs = [[<span class="number">1</span>, <span class="string">&quot;one&quot;</span>], [<span class="number">2</span>, <span class="string">&quot;two&quot;</span>], [<span class="number">3</span>, <span class="string">&quot;three&quot;</span>], [<span class="number">4</span>, <span class="string">&quot;four&quot;</span>]]</span><br><span class="line"></span><br><span class="line">pairs.sort(key=<span class="keyword">lambda</span> pair: pair[<span class="number">1</span>])  <span class="comment"># 每个元素使用第二个变量比较大小</span></span><br><span class="line"><span class="built_in">print</span>(pairs)  <span class="comment"># 输出：[[4, &#x27;four&#x27;], [1, &#x27;one&#x27;], [3, &#x27;three&#x27;], [2, &#x27;two&#x27;]]</span></span><br></pre></td></tr></table></figure><p>等价于下面的写法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pairs = [[<span class="number">1</span>, <span class="string">&quot;one&quot;</span>], [<span class="number">2</span>, <span class="string">&quot;two&quot;</span>], [<span class="number">3</span>, <span class="string">&quot;three&quot;</span>], [<span class="number">4</span>, <span class="string">&quot;four&quot;</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compare</span>(<span class="params">pair</span>):</span><br><span class="line">    <span class="keyword">return</span> pair[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pairs.sort(key=compare)  <span class="comment"># 每个元素使用第二个变量比较大小</span></span><br><span class="line"><span class="built_in">print</span>(pairs)  <span class="comment"># 输出：[[4, &#x27;four&#x27;], [1, &#x27;one&#x27;], [3, &#x27;three&#x27;], [2, &#x27;two&#x27;]]</span></span><br></pre></td></tr></table></figure><h3 id="5-函数递归"><a href="#5-函数递归" class="headerlink" title="5. 函数递归"></a>5. 函数递归</h3><p>在一个函数内部，也可以调用函数自身。这种写法被称为递归。</p><p>写递归函数可以从集合的角度来思考。理解递归函数的执行顺序可以用树的形式来思考。</p><p>例如，求解斐波那契数列第 nn 项可以采用如下写法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fib(<span class="number">6</span>))  <span class="comment"># 输出 8</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80&quot;&gt;1. 函数基础&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#11-%E7%BC%96%E5%86%99%E5%87%BD%E6%95%B0&quot;&gt;1.1 编写函数&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>github_workflow自动合并主线失败问题</title>
    <link href="https://zade23.github.io/2023/10/08/githun-workflow%E8%87%AA%E5%8A%A8%E5%90%88%E5%B9%B6%E4%B8%BB%E7%BA%BF%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/"/>
    <id>https://zade23.github.io/2023/10/08/githun-workflow%E8%87%AA%E5%8A%A8%E5%90%88%E5%B9%B6%E4%B8%BB%E7%BA%BF%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/</id>
    <published>2023-10-08T02:16:53.000Z</published>
    <updated>2023-10-08T02:37:06.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="github-workflow自动提交在合并主线时出现的问题"><a href="#github-workflow自动提交在合并主线时出现的问题" class="headerlink" title="github_workflow自动提交在合并主线时出现的问题"></a>github_workflow自动提交在合并主线时出现的问题</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>看到 GitHub 上的一个好玩的项目，大意就是保持个人主页的提交栏保持尝绿，看起来很有意思，于是学着构建了一个 GitHub_actions_workflow 。仓库是用来每日清晨推送 bing 的当日壁纸的，仓库为：<a href="https://github.com/zade23/auto-green">https://github.com/zade23/auto-green</a></p><p>但是部署之后发现 Actions 的 <em>合并提交</em> 动作一直失败，报错如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">remote:</span> <span class="string">Permission</span> <span class="string">to</span> <span class="string">zade23/auto-green.git</span> <span class="string">denied</span> <span class="string">to</span> <span class="string">github-actions[bot].</span></span><br><span class="line"><span class="attr">fatal:</span> <span class="string">unable</span> <span class="string">to</span> <span class="string">access</span> <span class="attr">&#x27;https://github.com/zade23/auto-green.git/&#x27;:</span> <span class="attr">The requested URL returned error:</span> <span class="number">403</span></span><br><span class="line"><span class="attr">Error: Invalid exit code:</span> <span class="number">128</span></span><br><span class="line">    <span class="string">at</span> <span class="string">ChildProcess.&lt;anonymous&gt;</span> <span class="string">(/home/runner/work/_actions/ad-m/github-push-action/master/start.js:30:21)</span></span><br><span class="line">    <span class="string">at</span> <span class="string">ChildProcess.emit</span> <span class="string">(node:events:513:28)</span></span><br><span class="line">    <span class="string">at</span> <span class="string">maybeClose</span> <span class="string">(node:internal/child_process:1100:16)</span></span><br><span class="line">    <span class="string">at</span> <span class="string">Process.ChildProcess._handle.onexit</span> <span class="string">(node:internal/child_process:304:5)</span> &#123;</span><br><span class="line">  <span class="attr">code:</span> <span class="number">128</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>分析主要问题，应试这段 <code>The requested URL returned error: 403</code> 。</p><p>最终在 Stack Overflow 上找到了解决办法：</p><p><a href="https://stackoverflow.com/questions/73687176/permission-denied-to-github-actionsbot-the-requested-url-returned-error-403">Permission denied to github-actions[bot]. The requested URL returned error: 403</a></p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>GitHub Actions 中自动提交功能必须在对应仓库下面手动设置允许 bot 合并提交的权限，否则合并动作就会被拒绝。</p><p>启动 actions 的 repository - Settings -&gt; Action -&gt; General -&gt; Workflow permissions</p><p><a href="https://imgse.com/i/pPvpqqe"><img src="https://z1.ax1x.com/2023/10/08/pPvpqqe.jpg" alt="操作流程"></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;github-workflow自动提交在合并主线时出现的问题&quot;&gt;&lt;a href=&quot;#github-workflow自动提交在合并主线时出现的问题&quot; class=&quot;headerlink&quot; title=&quot;github_workflow自动提交在合并主线时出现的问题&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第 109 场双周赛|个人总结</title>
    <link href="https://zade23.github.io/2023/07/23/%E7%AC%AC-109-%E5%9C%BA%E5%8F%8C%E5%91%A8%E8%B5%9B-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    <id>https://zade23.github.io/2023/07/23/%E7%AC%AC-109-%E5%9C%BA%E5%8F%8C%E5%91%A8%E8%B5%9B-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</id>
    <published>2023-07-23T14:21:11.000Z</published>
    <updated>2023-07-23T15:06:13.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第-109-场双周赛"><a href="#第-109-场双周赛" class="headerlink" title="第 109 场双周赛"></a>第 109 场双周赛</h1><h2 id="心路历程"><a href="#心路历程" class="headerlink" title="心路历程"></a>心路历程</h2><p>出门小聚，回到家打开网页已经过了半小时了，因此掉分了，事已至此，先看题吧……</p><p>从大佬们的反馈上，这场是手速场，后两道题是<strong>经典dp</strong>，但是需要考虑一下<strong>枚举选哪个？选或者不选？</strong>（来自灵神算法精讲）</p><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><blockquote><p>可以直接从力扣那边复制粘贴过来</p></blockquote><p><a href="https://leetcode.cn/problems/check-if-array-is-good/">检查数组是否是好的</a></p><p><a href="https://leetcode.cn/problems/sort-vowels-in-a-string/">将字符串中的元音字母排序</a></p><p><a href="https://leetcode.cn/problems/visit-array-positions-to-maximize-score/">访问数组中的位置使分数最大</a></p><p><a href="https://leetcode.cn/problems/ways-to-express-an-integer-as-sum-of-powers/">将一个数字表示成幂的和的方案数</a></p><hr><h2 id="第一题——检查数组是否是好的"><a href="#第一题——检查数组是否是好的" class="headerlink" title="第一题——检查数组是否是好的"></a>第一题——<a href="https://leetcode.cn/problems/check-if-array-is-good/">检查数组是否是好的</a></h2><blockquote><p>题目类型：Counter()函数</p></blockquote><p>思路和方法：Counter()已经是LeetCode第一题的常客了，字符串和列表这种序列的题型总是可以用到它</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我的方法：很笨，考虑两个条件，区间长度和前n-1项是否为自然数序列，这个方法由于一开始没有考虑前者，所以wa了一次。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isGood</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        nums.sort()</span><br><span class="line">        <span class="keyword">if</span> n - <span class="number">1</span> != nums[-<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> i != nums[i - <span class="number">1</span>]:</span><br><span class="line">                <span class="built_in">print</span>([i, nums[i]])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 灵神方法：Counter()</span></span><br></pre></td></tr></table></figure><hr><h2 id="第二题——将字符串中的元音字母排序"><a href="#第二题——将字符串中的元音字母排序" class="headerlink" title="第二题——将字符串中的元音字母排序"></a>第二题——<a href="https://leetcode.cn/problems/sort-vowels-in-a-string/">将字符串中的元音字母排序</a></h2><blockquote><p>题目类型：字符串排序</p></blockquote><p>思路和方法：之前在做二分法的题目时做到过字母排序的问题，那时知道了<strong>字母是可以按照ASCII值使用<code>sort()</code>排序的</strong>，但是后续还是按照笨办法吧元音字母排序出来了</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我的方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sortVowels</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="comment"># print((ord(&#x27;a&#x27;), ord(&#x27;A&#x27;)))</span></span><br><span class="line">        <span class="comment"># print([ord(&#x27;e&#x27;), ord(&#x27;i&#x27;), ord(&#x27;o&#x27;), ord(&#x27;u&#x27;)])</span></span><br><span class="line">        n = <span class="built_in">len</span>(s)</span><br><span class="line">        cnt = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> s[i] == <span class="string">&#x27;a&#x27;</span> <span class="keyword">or</span> s[i] == <span class="string">&#x27;e&#x27;</span> <span class="keyword">or</span> s[i] == <span class="string">&#x27;i&#x27;</span> <span class="keyword">or</span> s[i] == <span class="string">&#x27;o&#x27;</span> <span class="keyword">or</span> s[i] == <span class="string">&#x27;u&#x27;</span> <span class="keyword">or</span> s[i] == <span class="string">&#x27;A&#x27;</span> <span class="keyword">or</span> s[i] == <span class="string">&#x27;E&#x27;</span> <span class="keyword">or</span> s[i] == <span class="string">&#x27;I&#x27;</span> <span class="keyword">or</span> s[i] == <span class="string">&#x27;O&#x27;</span> <span class="keyword">or</span> s[i] == <span class="string">&#x27;U&#x27;</span>:</span><br><span class="line">                cnt.append(s[i])</span><br><span class="line">        cnt.sort()</span><br><span class="line">        t = <span class="string">&quot;&quot;</span></span><br><span class="line">        x = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> c == <span class="string">&#x27;a&#x27;</span> <span class="keyword">or</span> c == <span class="string">&#x27;e&#x27;</span> <span class="keyword">or</span> c == <span class="string">&#x27;i&#x27;</span> <span class="keyword">or</span> c == <span class="string">&#x27;o&#x27;</span> <span class="keyword">or</span> c == <span class="string">&#x27;u&#x27;</span> <span class="keyword">or</span> c == <span class="string">&#x27;A&#x27;</span> <span class="keyword">or</span> c == <span class="string">&#x27;E&#x27;</span> <span class="keyword">or</span> c == <span class="string">&#x27;I&#x27;</span> <span class="keyword">or</span> c == <span class="string">&#x27;O&#x27;</span> <span class="keyword">or</span> c == <span class="string">&#x27;U&#x27;</span>:</span><br><span class="line">                t += cnt[x]</span><br><span class="line">                x += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                t += c</span><br><span class="line">        <span class="keyword">return</span> t</span><br></pre></td></tr></table></figure><hr><h2 id="第三题——访问数组中的位置使分数最大"><a href="#第三题——访问数组中的位置使分数最大" class="headerlink" title="第三题——访问数组中的位置使分数最大"></a>第三题——<a href="https://leetcode.cn/problems/visit-array-positions-to-maximize-score/">访问数组中的位置使分数最大</a></h2><blockquote><p>题目类型：dp</p></blockquote><p>（待更新）</p><hr><h2 id="第四题——将一个数字表示成幂的和的方案数"><a href="#第四题——将一个数字表示成幂的和的方案数" class="headerlink" title="第四题——将一个数字表示成幂的和的方案数"></a>第四题——<a href="https://leetcode.cn/problems/ways-to-express-an-integer-as-sum-of-powers/">将一个数字表示成幂的和的方案数</a></h2><blockquote><p>题目类型：dp</p></blockquote><p>（待更新）</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>个人做题感想之类的</p></blockquote><p>dp是弱项，只有高强度的重复训练才能掌握。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第-109-场双周赛&quot;&gt;&lt;a href=&quot;#第-109-场双周赛&quot; class=&quot;headerlink&quot; title=&quot;第 109 场双周赛&quot;&gt;&lt;/a&gt;第 109 场双周赛&lt;/h1&gt;&lt;h2 id=&quot;心路历程&quot;&gt;&lt;a href=&quot;#心路历程&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第 355 场周赛|个人总结</title>
    <link href="https://zade23.github.io/2023/07/23/%E7%AC%AC-355-%E5%9C%BA%E5%91%A8%E8%B5%9B-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    <id>https://zade23.github.io/2023/07/23/%E7%AC%AC-355-%E5%9C%BA%E5%91%A8%E8%B5%9B-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</id>
    <published>2023-07-23T14:20:49.000Z</published>
    <updated>2023-07-23T14:47:50.141Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第-355-场周赛"><a href="#第-355-场周赛" class="headerlink" title="第 355 场周赛"></a>第 355 场周赛</h1><h2 id="心路历程"><a href="#心路历程" class="headerlink" title="心路历程"></a>心路历程</h2><p>一场体验不错的比赛，早起去公司做的，状态不错，所以涨分了~</p><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><blockquote><p>可以直接从力扣那边复制粘贴过来</p></blockquote><p><a href="https://leetcode.cn/problems/split-strings-by-separator/">按分隔符拆分字符串</a></p><p><a href="https://leetcode.cn/problems/largest-element-in-an-array-after-merge-operations/">合并后数组中的最大元素</a></p><p><a href="https://leetcode.cn/problems/maximum-number-of-groups-with-increasing-length/">长度递增组的最大数目</a></p><p><a href="https://leetcode.cn/problems/count-paths-that-can-form-a-palindrome-in-a-tree/">树中可以形成回文的路径数</a></p><hr><h2 id="第一题——按分隔符拆分字符串"><a href="#第一题——按分隔符拆分字符串" class="headerlink" title="第一题——按分隔符拆分字符串"></a>第一题——<a href="https://leetcode.cn/problems/split-strings-by-separator/">按分隔符拆分字符串</a></h2><blockquote><p>题目类型：字符串模拟</p></blockquote><p>方法和思路：</p><ul><li>活用<code>split()</code>函数——python在做LeetCode上的语法糖</li><li>注意空字符不输出</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我的解法：做了一个split()分割，再来个循环遍历split处理后的字符串，遇到字符串则不输出。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">splitWordsBySeparator</span>(<span class="params">self, words: <span class="type">List</span>[<span class="built_in">str</span>], separator: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        ans = []</span><br><span class="line">        ans1 = []       </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> words:</span><br><span class="line">            ans += i.split(separator)</span><br><span class="line">        n = <span class="built_in">len</span>(ans)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> ans[i] != <span class="string">&quot;&quot;</span>:</span><br><span class="line">                ans1.append(ans[i])</span><br><span class="line">        <span class="keyword">return</span> ans1</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 灵神做法：</span></span><br></pre></td></tr></table></figure><hr><h2 id="第二题——合并后数组中的最大元素"><a href="#第二题——合并后数组中的最大元素" class="headerlink" title="第二题——合并后数组中的最大元素"></a>第二题——<a href="https://leetcode.cn/problems/largest-element-in-an-array-after-merge-operations/">合并后数组中的最大元素</a></h2><blockquote><p>题目类型：倒叙实现</p></blockquote><p>思路和做法：抽象思维理解题意之后，正难则反，通过序列的最后往前加。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我的解法：思路很朴实，只有后面的数尽可能大才能满足这个条件让最终的结果尽可能大。想明白之后通过抽象模拟即可</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxArrayValue</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[i] &lt;= nums[i + <span class="number">1</span>]:</span><br><span class="line">                nums[i] += nums[i + <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 灵神做法</span></span><br></pre></td></tr></table></figure><hr><h2 id="第三题——长度递增组的最大数目"><a href="#第三题——长度递增组的最大数目" class="headerlink" title="第三题——长度递增组的最大数目"></a>第三题——<a href="https://leetcode.cn/problems/maximum-number-of-groups-with-increasing-length/">长度递增组的最大数目</a></h2><blockquote><p>题目类型：</p></blockquote><p>（待更新）</p><hr><h2 id="第四题——树中可以形成回文的路径数"><a href="#第四题——树中可以形成回文的路径数" class="headerlink" title="第四题——树中可以形成回文的路径数"></a>第四题——<a href="https://leetcode.cn/problems/count-paths-that-can-form-a-palindrome-in-a-tree/">树中可以形成回文的路径数</a></h2><blockquote><p>题目类型：</p></blockquote><p>（待更新）</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>个人做题感想之类的</p></blockquote><p>早起沉浸比赛的一天，第二题想得比较快，反而第一题在空字符串和缺失条件的情况下有些卡壳。由于第三第四题过难，导致没了区分度，很多大佬也做不出来，所以反而涨了些分。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第-355-场周赛&quot;&gt;&lt;a href=&quot;#第-355-场周赛&quot; class=&quot;headerlink&quot; title=&quot;第 355 场周赛&quot;&gt;&lt;/a&gt;第 355 场周赛&lt;/h1&gt;&lt;h2 id=&quot;心路历程&quot;&gt;&lt;a href=&quot;#心路历程&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python数据结构和算法</title>
    <link href="https://zade23.github.io/2023/07/18/Python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    <id>https://zade23.github.io/2023/07/18/Python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</id>
    <published>2023-07-18T07:12:00.000Z</published>
    <updated>2023-10-12T10:42:30.797Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E7%9B%B8%E5%85%B3">算法分析相关</a><ul><li><a href="#%E5%A4%8D%E6%9D%82%E5%BA%A6%E8%AE%A1%E7%AE%97">复杂度计算</a><ul><li><a href="#%E5%A4%A7-o-%E8%A1%A8%E7%A4%BA%E6%B3%95">大 <code>O</code> 表示法</a></li></ul></li></ul></li></ul><p><strong>类</strong> 都是对数据的构成（状态）以及数据能做什么（行为）的描述。<br>由于类的使用者只能看到数据项的状态和行为，因此类与抽象数据类型是相似的、</p><p>在面向对象编程范式中，数据项被称作 <strong>对象</strong> 一个对象就是类的一个实例。</p><p>1.内建原子数据结构<br>    python是通过两种内建数据类型实现整数类型和浮点数类型的，相应的python类就是 <code>int</code> 和 <code>float</code> 。</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p><strong>列表</strong> 是零个或多个指向 Python 数据对象的引用的有序集合，通过在方括号内以逗号分隔的一系列值来表达。空列表就是 <code>[]</code>。列表是异构的，这意味着其指向的数据对象不需要都是同一个类，并且这一集合可以被赋值给一个变量。下面的代码段展示了列表含有多个不同的 Python 数据对象。</p><p><strong>元组</strong> 通常写成由括号包含并且以逗号分隔的一系列值。与序列一样，元组允许之前描述的任一操作。</p><h4 id="列表提供的方法"><a href="#列表提供的方法" class="headerlink" title="列表提供的方法"></a>列表提供的方法</h4><table><thead><tr><th>方法名</th><th>用法</th><th>解释</th></tr></thead><tbody><tr><td><code>append</code></td><td><code>alist.append(item)</code></td><td>在列表末尾添加一个新元素</td></tr><tr><td><code>insert</code></td><td><code>alist.insert(i,item)</code></td><td>在列表的第! <code>i</code> 个位置插入一个元素</td></tr><tr><td><code>pop</code></td><td><code>alist.pop()</code></td><td>删除并返回列表中最后一个元素</td></tr><tr><td><code>pop</code></td><td><code>alist.pop(i)</code></td><td>删除并返回列表中第 <code>i</code> 个位置的元素</td></tr><tr><td><code>sort</code></td><td><code>alist.sort()</code></td><td>将列表元素排序</td></tr><tr><td><code>reverse</code></td><td><code>alist.reverse()</code></td><td>将列表元素倒序排列</td></tr><tr><td><code>del</code></td><td><code>del alist[i]</code></td><td>删除列表中第 <code>i</code> 个位置的元素</td></tr><tr><td><code>index</code></td><td><code>alist.index(item)</code></td><td>返回 <code>item</code> 第一次出现时的下标</td></tr><tr><td><code>count</code></td><td><code>alist.count(item)</code></td><td>返回 <code>item</code> 在列表中出现的次数</td></tr><tr><td><code>remove</code></td><td><code>alist.remove(item)</code></td><td>从列表中移除第一次出现的 <code>item</code></td></tr></tbody></table><p>对应输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>myList</span><br><span class="line">[<span class="number">1024</span>, <span class="number">3</span>, <span class="literal">True</span>, <span class="number">6.5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myList.append(<span class="literal">False</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myList</span><br><span class="line">[<span class="number">1024</span>, <span class="number">3</span>, <span class="literal">True</span>, <span class="number">6.5</span>, <span class="literal">False</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myList.insert(<span class="number">2</span>,<span class="number">4.5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myList</span><br><span class="line">[<span class="number">1024</span>, <span class="number">3</span>, <span class="number">4.5</span>, <span class="literal">True</span>, <span class="number">6.5</span>, <span class="literal">False</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myList.pop()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myList</span><br><span class="line">[<span class="number">1024</span>, <span class="number">3</span>, <span class="number">4.5</span>, <span class="literal">True</span>, <span class="number">6.5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myList.pop(<span class="number">1</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myList</span><br><span class="line">[<span class="number">1024</span>, <span class="number">4.5</span>, <span class="literal">True</span>, <span class="number">6.5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myList.pop(<span class="number">2</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myList</span><br><span class="line">[<span class="number">1024</span>, <span class="number">4.5</span>, <span class="number">6.5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myList.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myList</span><br><span class="line">[<span class="number">4.5</span>, <span class="number">6.5</span>, <span class="number">1024</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myList.reverse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myList</span><br><span class="line">[<span class="number">1024</span>, <span class="number">6.5</span>, <span class="number">4.5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myList.count(<span class="number">6.5</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myList.index(<span class="number">4.5</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myList.remove(<span class="number">6.5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myList</span><br><span class="line">[<span class="number">1024</span>, <span class="number">4.5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> myList[<span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myList</span><br><span class="line">[<span class="number">4.5</span>]</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串是零个或多个字母、数字和其他符号的有序集合。这些字母、数字和其他符号被称为 <em>字符</em>。常量字符串值通过引号（单引号或者双引号均可）与标识符进行区分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;David&quot;</span></span><br><span class="line"><span class="string">&#x27;David&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myName = <span class="string">&quot;David&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myName[<span class="number">3</span>]</span><br><span class="line"><span class="string">&#x27;i&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myName*<span class="number">2</span></span><br><span class="line"><span class="string">&#x27;DavidDavid&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(myName)</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="字符串提供的方法"><a href="#字符串提供的方法" class="headerlink" title="字符串提供的方法"></a>字符串提供的方法</h4><table><thead><tr><th>方法名</th><th>用法</th><th>解释</th></tr></thead><tbody><tr><td><code>center</code></td><td><code>astring.center(w)</code></td><td>返回一个字符串，原字符串居中，使用空格填充新字符串，使其长度为 <code>w</code></td></tr><tr><td><code>count</code></td><td><code>astring.count(item)</code></td><td>返回 <code>item</code> 出现的次数</td></tr><tr><td><code>ljust</code></td><td><code>astring.ljust(w)</code></td><td>返回一个字符串，将原字符串靠左放置并填充空格至长度 <code>w</code></td></tr><tr><td><code>rjust</code></td><td><code>astring.rjust(w)</code></td><td>返回一个字符串，将原字符串靠右放置并填充空格至长度 <code>w</code></td></tr><tr><td><code>lower</code></td><td><code>astring.lower()</code></td><td>返回均为小写字母的字符串</td></tr><tr><td><code>upper</code></td><td><code>astring.upper()</code></td><td>返回均为大写字母的字符串</td></tr><tr><td><code>find</code></td><td><code>astring.find(item)</code></td><td>返回 <code>item</code> 第一次出现时的下标</td></tr><tr><td><code>split</code></td><td><code>astring.split(schar)</code></td><td>在 <code>schar</code> 位置将字符串分割成子串，不填则默认分割空格和换行符</td></tr></tbody></table><p>列表和字符串的区别：</p><ul><li>列表有 <strong>可修改性</strong> ，字符串没有</li></ul><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p><strong>集</strong>（set）是由零个或多个不可修改的 Python 数据对象组成的无序集合。集不允许重复元素，并且写成由花括号包含、以逗号分隔的一系列值。空集由 <code>set()</code> 来表示。集是异构的，并且可以通过下面的方法赋给变量。</p><h4 id="Python-集支持的运算"><a href="#Python-集支持的运算" class="headerlink" title="Python 集支持的运算"></a>Python 集支持的运算</h4><table><thead><tr><th>运算名</th><th>运算符</th><th>解释</th></tr></thead><tbody><tr><td>成员</td><td><code>in</code></td><td>询问集中是否有某元素</td></tr><tr><td>长度</td><td><code>len</code></td><td>获取集的元素个数</td></tr><tr><td><code>|</code></td><td><code>aset | otherset</code></td><td>返回一个包含 <code>aset</code> 与 <code>otherset</code> 所有元素的新集</td></tr><tr><td><code>&amp;</code></td><td><code>aset &amp; otherset</code></td><td>返回一个包含 <code>aset</code> 与 <code>otherset</code> 共有元素的新集</td></tr><tr><td><code>-</code></td><td><code>aset - otherset</code></td><td>返回一个集，其中包含只出现在 <code>aset</code> 中的元素</td></tr><tr><td><code>&lt;=</code></td><td><code>aset &lt;= otherset</code></td><td>询问 <code>aset</code> 中的所有元素是否都在 <code>otherset</code> 中</td></tr></tbody></table><h4 id="Python-集提供的方法"><a href="#Python-集提供的方法" class="headerlink" title="Python 集提供的方法"></a>Python 集提供的方法</h4><table><thead><tr><th>方法名</th><th>用法</th><th>解释</th></tr></thead><tbody><tr><td><code>union</code></td><td><code>aset.union(otherset)</code></td><td>返回一个包含 <code>aset</code> 和 <code>otherset</code> 所有元素的集</td></tr><tr><td><code>intersection</code></td><td><code>aset.intersection(otherset)</code></td><td>返回一个仅包含两个集共有元素的集</td></tr><tr><td><code>difference</code></td><td><code>aset.difference(otherset)</code></td><td>返回一个集，其中仅包含只出现在 <code>aset</code> 中的元素</td></tr><tr><td><code>issubset</code></td><td><code>aset.issubset(otherset)</code></td><td>询问 <code>aset</code> 是否为 <code>otherset</code> 的子集</td></tr><tr><td><code>add</code></td><td><code>aset.add(item)</code></td><td>向 <code>aset</code> 添加一个元素</td></tr><tr><td><code>remove</code></td><td><code>aset.remove(item)</code></td><td>将 <code>item</code> 从 <code>aset</code> 中移除</td></tr><tr><td><code>pop</code></td><td><code>aset.pop()</code></td><td>随机移除 <code>aset</code> 中的一个元素</td></tr><tr><td><code>clear</code></td><td><code>aset.clear()</code></td><td>清除 <code>aset</code> 中的所有元素</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mySet</span><br><span class="line">&#123;<span class="literal">False</span>, <span class="number">4.5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="string">&#x27;cat&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>yourSet = &#123;<span class="number">99</span>,<span class="number">3</span>,<span class="number">100</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mySet.union(yourSet)</span><br><span class="line">&#123;<span class="literal">False</span>, <span class="number">4.5</span>, <span class="number">3</span>, <span class="number">100</span>, <span class="number">6</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="number">99</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mySet | yourSet</span><br><span class="line">&#123;<span class="literal">False</span>, <span class="number">4.5</span>, <span class="number">3</span>, <span class="number">100</span>, <span class="number">6</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="number">99</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mySet.intersection(yourSet)</span><br><span class="line">&#123;<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mySet &amp; yourSet</span><br><span class="line">&#123;<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mySet.difference(yourSet)</span><br><span class="line">&#123;<span class="literal">False</span>, <span class="number">4.5</span>, <span class="number">6</span>, <span class="string">&#x27;cat&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mySet - yourSet</span><br><span class="line">&#123;<span class="literal">False</span>, <span class="number">4.5</span>, <span class="number">6</span>, <span class="string">&#x27;cat&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">3</span>,<span class="number">100</span>&#125;.issubset(yourSet)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">3</span>,<span class="number">100</span>&#125;&lt;=yourSet</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mySet.add(<span class="string">&quot;house&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mySet</span><br><span class="line">&#123;<span class="literal">False</span>, <span class="number">4.5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="string">&#x27;house&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mySet.remove(<span class="number">4.5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mySet</span><br><span class="line">&#123;<span class="literal">False</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="string">&#x27;house&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mySet.pop()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mySet</span><br><span class="line">&#123;<span class="number">3</span>, <span class="number">6</span>, <span class="string">&#x27;house&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mySet.clear()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mySet</span><br></pre></td></tr></table></figure><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p><strong>字典</strong> 是无序结构，由相关的元素对构成，其中每对元素都由一个键和一个值组成。这种键–值对通常写成键:值的形式。字典由花括号包含的一系列以逗号分隔的键–值对表达，如下所示。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>capitals = &#123;<span class="string">&#x27;Iowa&#x27;</span>:<span class="string">&#x27;DesMoines&#x27;</span>,<span class="string">&#x27;Wisconsin&#x27;</span>:<span class="string">&#x27;Madison&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>capitals&#123;<span class="string">&#x27;Wisconsin&#x27;</span>:<span class="string">&#x27;Madison&#x27;</span>, <span class="string">&#x27;Iowa&#x27;</span>:<span class="string">&#x27;DesMoines&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>可以通过键访问其对应的值，也可以向字典添加新的键–值对。<br>访问字典的语法与访问序列的语法十分相似，只不过是使用键来访问，而不是下标。添加新值也类似。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>capitals[<span class="string">&#x27;Iowa&#x27;</span>] = <span class="string">&#x27;DesMoines&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>capitals[<span class="string">&#x27;Utah&#x27;</span>] = <span class="string">&#x27;SaltLakeCity&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>capitals&#123;<span class="string">&#x27;Utah&#x27;</span>:<span class="string">&#x27;SaltLakeCity&#x27;</span>, <span class="string">&#x27;Wisconsin&#x27;</span>:<span class="string">&#x27;Madison&#x27;</span>, <span class="string">&#x27;Iowa&#x27;</span>:<span class="string">&#x27;DesMoines&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>capitals[<span class="string">&#x27;California&#x27;</span>]=<span class="string">&#x27;Sacramento&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>capitals&#123;<span class="string">&#x27;Utah&#x27;</span>:<span class="string">&#x27;SaltLakeCity&#x27;</span>, <span class="string">&#x27;Wisconsin&#x27;</span>:<span class="string">&#x27;Madison&#x27;</span>, <span class="string">&#x27;Iowa&#x27;</span>:<span class="string">&#x27;DesMoines&#x27;</span>, <span class="string">&#x27;California&#x27;</span>:<span class="string">&#x27;Sacramento&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(capitals)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span></span><br></pre></td></tr></table></figure><p>需要谨记，字典并不是根据键来进行有序维护的。第一个添加的键–值对（<code>&#39;Utah&#39;:&#39;SaltLakeCity&#39;</code>）被放在了字典的第一位，第二个添加的键–值对（<code>&#39;California&#39;:&#39;Sacramento&#39;</code>）则被放在了最后。</p><h4 id="字典的运算"><a href="#字典的运算" class="headerlink" title="字典的运算"></a>字典的运算</h4><p><code>keys</code>、<code>values</code> 和 <code>items</code> 方法均会返回包含相应值的对象。可以使用 <code>list</code> 函数将字典转换成列表。</p><table><thead><tr><th>运算名</th><th>运算符</th><th>解释</th></tr></thead><tbody><tr><td><code>[]</code></td><td><code>myDict[k]</code></td><td>返回与 <code>k</code> 相关联的值，如果没有则报错</td></tr><tr><td><code>in</code></td><td><code>key in adict</code></td><td>如果 <code>key</code> 在字典中，返回 <code>True</code>，否则返回 <code>False</code></td></tr><tr><td><code>del</code></td><td><code>del adict[key]</code></td><td>从字典中删除 <code>key</code> 的键–值对</td></tr></tbody></table><h4 id="字典的方法"><a href="#字典的方法" class="headerlink" title="字典的方法"></a>字典的方法</h4><p><code>get</code> 方法有两种版本。如果键没有出现在字典中，<code>get</code> 会返回 <code>None</code>。然而，第二个可选参数可以返回特定值。</p><table><thead><tr><th>方法名</th><th>用法</th><th>解释</th></tr></thead><tbody><tr><td><code>keys</code></td><td><code>adict.keys()</code></td><td>返回包含字典中所有键的 <code>dict_keys</code> 对象</td></tr><tr><td><code>values</code></td><td><code>adict.values()</code></td><td>返回包含字典中所有值的 <code>dict_values</code> 对象</td></tr><tr><td><code>items</code></td><td><code>adict.items()</code></td><td>返回包含字典中所有键–值对的 <code>dict_items</code> 对象</td></tr><tr><td><code>get</code></td><td><code>adict.get(k)</code></td><td>返回 <code>k</code> 对应的值，如果没有则返回 <code>None</code></td></tr><tr><td><code>get</code></td><td><code>adict.get(k, alt)</code></td><td>返回 <code>k</code> 对应的值，如果没有则返回 <code>alt</code></td></tr></tbody></table><h4 id="字典实例"><a href="#字典实例" class="headerlink" title="字典实例"></a>字典实例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>phoneext=&#123;<span class="string">&#x27;david&#x27;</span>:<span class="number">1410</span>, <span class="string">&#x27;brad&#x27;</span>:<span class="number">1137</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>phoneext</span><br><span class="line">&#123;<span class="string">&#x27;brad&#x27;</span>:<span class="number">1137</span>, <span class="string">&#x27;david&#x27;</span>:<span class="number">1410</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>phoneext.keys()</span><br><span class="line">dict_keys([<span class="string">&#x27;brad&#x27;</span>, <span class="string">&#x27;david&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(phoneext.keys())</span><br><span class="line">[<span class="string">&#x27;brad&#x27;</span>, <span class="string">&#x27;david&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>phoneext.values()</span><br><span class="line">dict_values([<span class="number">1137</span>, <span class="number">1410</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(phoneext.values())</span><br><span class="line">[<span class="number">1137</span>, <span class="number">1410</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>phoneext.items()</span><br><span class="line">dict_items([(<span class="string">&#x27;brad&#x27;</span>, <span class="number">1137</span>), (<span class="string">&#x27;david&#x27;</span>, <span class="number">1410</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(phoneext.items())</span><br><span class="line">[(<span class="string">&#x27;brad&#x27;</span>, <span class="number">1137</span>), (<span class="string">&#x27;david&#x27;</span>, <span class="number">1410</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>phoneext.get(<span class="string">&quot;kent&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>phoneext.get(<span class="string">&quot;kent&quot;</span>, <span class="string">&quot;NO ENTRY&quot;</span>)</span><br><span class="line"><span class="string">&#x27;NO ENTRY&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h2><p>程序经常要和用户进行交互。</p><p>目前的大多数程序使用对话框作为要求用户提供某种输入的方式。尽管 Python 确实有方法来创建这样的对话框，但是可以利用更简单的函数。Python 提供了一个函数，它使得我们可以要求用户输入数据并且返回一个字符串的引用。这个函数就是 <code>input</code>。</p><h3 id="提示字符串"><a href="#提示字符串" class="headerlink" title="提示字符串"></a>提示字符串</h3><p><code>input</code> 函数接受一个字符串作为参数。由于该字符串包含有用的文本来提示用户输入，因此它经常被称为 <strong>提示字符串</strong>。举例来说，可以像下面这样调用 <code>input</code>。</p><p>不论用户在提示字符串后面输入什么内容，都会被存储在 <code>aName</code> 变量中。使用 <code>input</code> 函数，可以非常简便地写出程序，让用户输入数据，然后再对这些数据进行进一步处理。例如，在下面的两条语句中，第一条要求用户输入姓名，第二条则打印出对输入字符串进行一些简单处理后的结果。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aName = <span class="built_in">input</span>(<span class="string">&quot;Please enter your name &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Your name in all capitals is &quot;</span>,</span><br><span class="line">        aName.upper(),</span><br><span class="line">        <span class="string">&quot;and has length&quot;</span>,</span><br><span class="line">        <span class="built_in">len</span>(aName))</span><br></pre></td></tr></table></figure><p>需要注意的是，<code>input</code> 函数返回的值是一个字符串，它包含用户在提示字符串后面输入的所有字符。如果需要将这个字符串转换成其他类型，必须明确地提供类型转换。在下面的语句中，用户输入的字符串被转换成了浮点数，以便于后续的算术处理。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sradius = <span class="built_in">input</span>(<span class="string">&quot;Please enter the radius of the circle &quot;</span>)</span><br><span class="line">radius = <span class="built_in">float</span>(sradius)</span><br><span class="line">diameter = <span class="number">2</span> * radius</span><br></pre></td></tr></table></figure><h3 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h3><p><code>print</code> 函数为输出 Python 程序的值提供了一种非常简便的方法。它接受零个或者多个参数，并且将单个空格作为默认分隔符来显示结果。通过设置 <code>sep</code> 这一实际参数可以改变分隔符。此外，每一次打印都默认以换行符结尾。这一行为可以通过设置实际参数 <code>end</code> 来更改。下面是一些例子。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">Hello</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>,<span class="string">&quot;World&quot;</span>)</span><br><span class="line">Hello World</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>,<span class="string">&quot;World&quot;</span>, sep=<span class="string">&quot;***&quot;</span>)</span><br><span class="line">Hello***World</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>,<span class="string">&quot;World&quot;</span>, end=<span class="string">&quot;***&quot;</span>)</span><br><span class="line">Hello World***</span><br></pre></td></tr></table></figure><p>Python 提供了另一种叫作 <strong>格式化字符串</strong> 的方式。格式化字符串是一个模板，其中包含保持不变的单词或空格，以及之后插入的变量的占位符。例如，下面的语句包含 <code>is</code> 和 <code>years old.</code>，但是名字和年龄会根据运行时变量的值而发生改变。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(aName, <span class="string">&quot;is&quot;</span>, age, <span class="string">&quot;years old.&quot;</span>)</span><br></pre></td></tr></table></figure><p>使用格式化字符串，可以将上面的语句重写成下面的语句。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%s is %d years old.&quot;</span> % (aName, age))</span><br></pre></td></tr></table></figure><h4 id="格式化字符串可用的类型声明"><a href="#格式化字符串可用的类型声明" class="headerlink" title="格式化字符串可用的类型声明"></a>格式化字符串可用的类型声明</h4><p><code>%</code> 是字符串运算符，被称作 <strong>格式化运算符</strong>。</p><p>表达式的左边部分是模板（也叫格式化字符串），右边部分则是一系列用于格式化字符串的值。</p><p>格式化字符串可以包含一个或者多个转换声明。转换字符告诉格式化运算符，什么类型的值会被插入到字符串中的相应位置。</p><p>在上面的例子中，<code>%s</code> 声明了一个字符串，<code>%d</code> 则声明了一个整数。其他可能的类型声明还包括 <code>i</code>、<code>u</code>、<code>f</code>、<code>e</code>、<code>g</code>、<code>c</code> 和 <code>%</code>。</p><table><thead><tr><th>字符</th><th>输出格式</th></tr></thead><tbody><tr><td><code>d</code>、<code>i</code></td><td>整数</td></tr><tr><td><code>u</code></td><td>无符号整数</td></tr><tr><td><code>f</code></td><td>m.dddd 格式的浮点数</td></tr><tr><td><code>e</code></td><td>m.dddde+&#x2F;-xx 格式的浮点数</td></tr><tr><td><code>E</code></td><td>m.ddddE+&#x2F;-xx 格式的浮点数</td></tr><tr><td><code>g</code></td><td>对指数小于-4 或者大于 5 的使用 <code>%e</code>，否则使用 <code>%f</code></td></tr><tr><td><code>c</code></td><td>单个字符</td></tr><tr><td><code>s</code></td><td>字符串，或者任意可以通过 <code>str</code> 函数转换成字符串的 Python 数据对象</td></tr><tr><td><code>%</code></td><td>插入一个常量 <code>%</code> 符号</td></tr></tbody></table><h4 id="格式化修改符"><a href="#格式化修改符" class="headerlink" title="格式化修改符"></a>格式化修改符</h4><table><thead><tr><th>修改符</th><th>例子</th><th>解释</th></tr></thead><tbody><tr><td>数字</td><td><code>%20d</code></td><td>将值放在 20 个字符宽的区域中</td></tr><tr><td><code>-</code></td><td><code>%-20d</code></td><td>将值放在 20 个字符宽的区域中，并且左对齐</td></tr><tr><td><code>+</code></td><td><code>%+20d</code></td><td>将值放在 20 个字符宽的区域中，并且右对齐</td></tr><tr><td><code>0</code></td><td><code>%020d</code></td><td>将值放在 20 个字符宽的区域中，并在前面补上 0</td></tr><tr><td><code>.</code></td><td><code>%20.2f</code></td><td>将值放在 20 个字符宽的区域中，并且保留小数点后 2 位</td></tr><tr><td><code>(name)</code></td><td><code>%(name)d</code></td><td>从字典中获取 <code>name</code> 键对应的值</td></tr></tbody></table><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>price = <span class="number">24</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>item = <span class="string">&quot;banana&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;The %s costs %d cents&quot;</span> % (item,price))</span><br><span class="line">The banana costs <span class="number">24</span> cents</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;The %+10s costs %5.2f cents&quot;</span> % (item,price))</span><br><span class="line">The     banana costs <span class="number">24.00</span> cents</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;The %+10s costs %10.2f cents&quot;</span> % (item,price))</span><br><span class="line">The     banana costs     <span class="number">24.00</span> cents</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>itemdict = &#123;<span class="string">&quot;item&quot;</span>:<span class="string">&quot;banana&quot;</span>,<span class="string">&quot;cost&quot;</span>:<span class="number">24</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;The %(item)s costs %(cost)7.1f cents&quot;</span> % itemdict)</span><br><span class="line">The banana costs    <span class="number">24.0</span> cents</span><br></pre></td></tr></table></figure><h2 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h2><p>Python提供的标准的标准控制语句有 <code>while</code> 语句以及 <code>for</code> 语句。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>counter = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> counter &lt;= <span class="number">5</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&quot;Hello, world&quot;</span>)</span><br><span class="line"><span class="meta">... </span>    counter = counter + <span class="number">1</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Hello, world</span><br><span class="line">Hello, world</span><br><span class="line">Hello, world</span><br><span class="line">Hello, world</span><br><span class="line">Hello, world</span><br></pre></td></tr></table></figure><p>看下面这个例子。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> counter &lt;= <span class="number">10</span> <span class="keyword">and</span> <span class="keyword">not</span> done:</span><br></pre></td></tr></table></figure><p>迭代语句只有在上面两个条件都满足的情况下才会被执行。变量 <code>counter</code> 的值需要小于或等于 10，并且变量 <code>done</code> 的值需要为 <code>False</code>（<code>not False</code> 就是 <code>True</code>），因此 <code>True and True</code> 的最后结果才是 <code>True</code>。</p><p><code>for</code>在遍历每一个成员上非常的方便。例如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> item <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>]:</span><br><span class="line"><span class="meta">... </span>   <span class="built_in">print</span>(item)</span><br><span class="line">...</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="列表解析式"><a href="#列表解析式" class="headerlink" title="列表解析式"></a>列表解析式</h3><p>列表可以通过使用迭代结构和分支结构来创建。这种方式被称为 <strong>列表解析式</strong>。通过列表解析式，可以根据一些处理和分支标准轻松创建列表。</p><p>举例来说，如果想创建一个包含前 10 个完全平方数的列表，可以使用以下的 <code>for</code> 语句。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sqlist = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">         sqlist.append(x*x)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sqlist</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure><p>进阶：使用列表解析式，只需一行代码即可创建完成。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sqlist = [x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sqlist</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure><p>进阶：变量 <code>x</code> 会依次取由 <code>for</code> 语句指定的 1 到 10 为值。之后，计算 <code>x*x</code> 的值并将结果添加到正在构建的列表中。列表解析式也允许添加一个分支语句来控制添加到列表中的元素。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sqlist = [x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>) <span class="keyword">if</span> x%<span class="number">2</span> != <span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sqlist</span><br><span class="line">[<span class="number">1</span>, <span class="number">9</span>, <span class="number">25</span>, <span class="number">49</span>, <span class="number">81</span>]</span><br></pre></td></tr></table></figure><p>例子：（力扣的原题：输出列表中非元音的字母并以大写形式返回）</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;[ch.upper() <span class="keyword">for</span> ch <span class="keyword">in</span> <span class="string">&#x27;comprehension&#x27;</span> <span class="keyword">if</span> ch <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;aeiou&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;N&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>下面定义的简单函数会返回传入值的平方。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">n</span>):</span><br><span class="line"><span class="meta">... </span>   <span class="keyword">return</span> n**<span class="number">2</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>square(<span class="number">3</span>)</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>square(square(<span class="number">3</span>))</span><br><span class="line"><span class="number">81</span></span><br></pre></td></tr></table></figure><p>同样的，我们可以自己定义一个平方根函数 <code>squareroot()</code> </p><blockquote><p>通过牛顿迭代法求解平方根</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>  <span class="keyword">def</span> <span class="title function_">squareroot</span>(<span class="params">n</span>):</span><br><span class="line"><span class="number">2.</span>      root = n/<span class="number">2</span> <span class="comment">#initial guess will be 1/2 of n</span></span><br><span class="line"><span class="number">3.</span>      <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line"><span class="number">4.</span>          root = (<span class="number">1</span>/<span class="number">2</span>)*(root + (n / root))</span><br><span class="line"><span class="number">5.</span></span><br><span class="line"><span class="number">6.</span>      <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><p>接下来，模拟调用这个函数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>squareroot(<span class="number">9</span>)</span><br><span class="line"><span class="number">3.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>squareroot(<span class="number">4563</span>)</span><br><span class="line"><span class="number">67.549981495186216</span></span><br></pre></td></tr></table></figure><h2 id="面向对象：定义-类"><a href="#面向对象：定义-类" class="headerlink" title="面向对象：定义 类"></a>面向对象：定义 <code>类</code></h2><h1 id="算法分析相关"><a href="#算法分析相关" class="headerlink" title="算法分析相关"></a>算法分析相关</h1><h2 id="复杂度计算"><a href="#复杂度计算" class="headerlink" title="复杂度计算"></a>复杂度计算</h2><h3 id="大-O-表示法"><a href="#大-O-表示法" class="headerlink" title="大 O 表示法"></a>大 <code>O</code> 表示法</h3><blockquote><p>如果可以通过观察循环结构和算法的方式快速判断出复杂度就算出师</p></blockquote><p>异序词排序问题</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">anagramSolution1</span>(<span class="params">s1, s2</span>):</span><br><span class="line">   alist = <span class="built_in">list</span>(s2)</span><br><span class="line"></span><br><span class="line">   pos1 = <span class="number">0</span></span><br><span class="line">   StillOK = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span> pos1 &lt; <span class="built_in">len</span>(s1) <span class="keyword">and</span> stillOK:</span><br><span class="line">      pos2 = <span class="number">0</span></span><br><span class="line">      found = <span class="literal">False</span></span><br><span class="line">      <span class="keyword">while</span> pos2 &lt; <span class="built_in">len</span>(alist) <span class="keyword">and</span> <span class="keyword">not</span> found:</span><br><span class="line">         <span class="keyword">if</span> s1[pos1] == alist[pos2]:</span><br><span class="line">            found = <span class="literal">True</span></span><br><span class="line">         <span class="keyword">else</span>:</span><br><span class="line">            pos2 += <span class="number">1</span></span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> found:</span><br><span class="line">         alist[pos2] = <span class="literal">None</span></span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">         stillOK = <span class="literal">False</span></span><br><span class="line">      </span><br><span class="line">      pos1 += <span class="number">1</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> stillOK</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">anagramSolution2</span>(<span class="params">s1, s2</span>):</span><br><span class="line">   alist1 = <span class="built_in">list</span>(s1)</span><br><span class="line">   alist2 = <span class="built_in">list</span>(s2)</span><br><span class="line"></span><br><span class="line">   <span class="comment"># 这里需要记住，常用的几类排序时间复杂度在 O(n^2) 或 O(nlogn)</span></span><br><span class="line">   alist1.sort()</span><br><span class="line">   alist2.sort()</span><br><span class="line"></span><br><span class="line">   pos = <span class="number">0</span></span><br><span class="line">   matches = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span> pos &lt; <span class="built_in">len</span>(s1) <span class="keyword">and</span> matches:</span><br><span class="line">      <span class="keyword">if</span> alist1[pos] == alist2[pos]:</span><br><span class="line">         pos += <span class="number">1</span></span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">         matches = <span class="literal">False</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> matches</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">anagramSolution3</span>(<span class="params">s1, s2</span>):</span><br><span class="line">   c1 = [<span class="number">0</span>] * n</span><br><span class="line">   c2 = [<span class="number">0</span>] * n</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s1)):</span><br><span class="line">      pos = <span class="built_in">ord</span>(s1[i]) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">      c1[pos] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s2)):</span><br><span class="line">      pos = <span class="built_in">ord</span>(s2[i] - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">      c2[pos] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">   j = <span class="number">0</span></span><br><span class="line">   stillOk = <span class="literal">True</span></span><br><span class="line">   <span class="keyword">while</span> j &lt; <span class="number">26</span> <span class="keyword">and</span> stillOK:</span><br><span class="line">      <span class="keyword">if</span> c1[j] == c2[j]:</span><br><span class="line">         j += <span class="number">1</span></span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">         stillOK = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> stillOk</span><br></pre></td></tr></table></figure><p>第四个例子是最快的。因为没有循环嵌套，只有<code>O(n)</code>的复杂度。倘若需要考虑关于空间上的需求，那么第四个例子新开了额外的空间用于存储计数器，这种方式就是常说的：空间换时间的方法。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E7%9B%B8%E5%85%B3&quot;&gt;算法分析相关&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%A4%8D%E6%9D%82%E5%BA%A6%E8%AE%A1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第 354 场周赛|个人总结</title>
    <link href="https://zade23.github.io/2023/07/18/%E7%AC%AC-354-%E5%9C%BA%E5%91%A8%E8%B5%9B-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    <id>https://zade23.github.io/2023/07/18/%E7%AC%AC-354-%E5%9C%BA%E5%91%A8%E8%B5%9B-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</id>
    <published>2023-07-18T07:11:22.000Z</published>
    <updated>2023-07-23T14:23:06.683Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第-354-场周赛"><a href="#第-354-场周赛" class="headerlink" title="第 354 场周赛"></a>第 354 场周赛</h1><h2 id="心路历程"><a href="#心路历程" class="headerlink" title="心路历程"></a>心路历程</h2><p>日期：2023年7月16日</p><p>第一道路题目是简单的模拟，第二题开始花费了非常多的时间，导致后面没什么时间看第三第四题。上周的两场比赛出了三道动态规划，但这场几乎没有，都是思维题目。</p><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><blockquote><p>可以直接从力扣那边复制粘贴过来</p></blockquote><p><a href="https://leetcode.cn/problems/sum-of-squares-of-special-elements/">特殊元素平方和</a></p><p><a href="https://leetcode.cn/problems/maximum-beauty-of-an-array-after-applying-operation/">数组的最大美丽值</a></p><p><a href="https://leetcode.cn/problems/minimum-index-of-a-valid-split/">合法分割的最小下标</a></p><p><a href="https://leetcode.cn/problems/length-of-the-longest-valid-substring/">最长合法子字符串的长度</a></p><hr><h2 id="第一题——特殊元素平方和"><a href="#第一题——特殊元素平方和" class="headerlink" title="第一题——特殊元素平方和"></a>第一题——<a href="https://leetcode.cn/problems/sum-of-squares-of-special-elements/">特殊元素平方和</a></h2><blockquote><p>题目类型：模拟</p></blockquote><p>按照题意分析正常模拟就好。我使用的for循环的方法，看到别人又用enumerate的方法，也记录一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我的做法：for循环</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sumOfSquares</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">                ans += nums[i - <span class="number">1</span>] * nums[i - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参考榜单：enumerate做法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sumOfSquares</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums, <span class="number">1</span>):    <span class="comment"># key 是从 1 开始的</span></span><br><span class="line">            <span class="keyword">if</span> n % k:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            ans += v * v</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><hr><h2 id="第二题——数组的最大美丽值"><a href="#第二题——数组的最大美丽值" class="headerlink" title="第二题——数组的最大美丽值"></a>第二题——<a href="https://leetcode.cn/problems/maximum-beauty-of-an-array-after-applying-operation/">数组的最大美丽值</a></h2><blockquote><p>题目类型：子序列，二分法思维转换</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maximumBeauty</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        nums.sort()</span><br><span class="line">        ans = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            j = bisect_right(nums, v + <span class="number">2</span> * k)</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, j - i)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>有几个特殊的“点”：</p><ul><li>题目要求的子序列并不要求连续，因此怎么方便处理怎么来。这里排序<code>sort()</code>就成一种简化问题的方式。</li><li>合理的使用bisect函数，可以帮助不想写二分查找的伙伴偷懒。</li><li>最后的区间 <code>j - i</code> 是也是由上面一条二分之后指针的落点决定的。实际上是一个左闭右开区间。</li></ul><hr><h2 id="第三题——合法分割的最小下标"><a href="#第三题——合法分割的最小下标" class="headerlink" title="第三题——合法分割的最小下标"></a>第三题——<a href="https://leetcode.cn/problems/minimum-index-of-a-valid-split/">合法分割的最小下标</a></h2><blockquote><p>题目类型：</p><p>同类题目：169多数元素 O(1) 空间找众数</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minimumIndex</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        支配元素 = 众数</span></span><br><span class="line"><span class="string">        众数在python中的简便求法： Counter(nums).most_common(1)[0]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        同类题型：169.多数元素 O(1) 空间找众数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        mode, total = Counter(nums).most_common(<span class="number">1</span>)[<span class="number">0</span>] <span class="comment"># 通过这一句话就找到了value</span></span><br><span class="line">        freq1 = <span class="number">0</span> <span class="comment"># 用来记录前半段有多少个支配元素</span></span><br><span class="line">        <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> x == mode:</span><br><span class="line">                freq1 += <span class="number">1</span>   <span class="comment"># 指针每扫过一个众数，左侧指针就加一个</span></span><br><span class="line">            <span class="keyword">if</span> freq1 * <span class="number">2</span> &gt; i + <span class="number">1</span> <span class="keyword">and</span> (total - freq1) * <span class="number">2</span> &gt; n - i - <span class="number">1</span>:  <span class="comment"># 是否满足题目对整数数组的左右要求</span></span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><p>用到的技巧：</p><ul><li>Conuter函数中，灵活运用统计众数的方法most_commont(n)，其中n代表统计最多出现的前n个元组。Counter(nums).most_common(1)[0]即统计众数</li><li>大胆尝试暴力算法（有的时候要看一下数据的长度区间）</li></ul><hr><h2 id="第四题——最长合法子字符串的长度"><a href="#第四题——最长合法子字符串的长度" class="headerlink" title="第四题——最长合法子字符串的长度"></a>第四题——<a href="https://leetcode.cn/problems/length-of-the-longest-valid-substring/">最长合法子字符串的长度</a></h2><blockquote><p>题目类型：</p></blockquote><p>（待更新）</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>个人做题感想之类的</p></blockquote><p>一场语法和思路的赛题。思路上还是需要常用<strong>正难则反</strong>的原则。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第-354-场周赛&quot;&gt;&lt;a href=&quot;#第-354-场周赛&quot; class=&quot;headerlink&quot; title=&quot;第 354 场周赛&quot;&gt;&lt;/a&gt;第 354 场周赛&lt;/h1&gt;&lt;h2 id=&quot;心路历程&quot;&gt;&lt;a href=&quot;#心路历程&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第 108 场双周赛|个人总结</title>
    <link href="https://zade23.github.io/2023/07/10/%E7%AC%AC-108-%E5%9C%BA%E5%8F%8C%E5%91%A8%E8%B5%9B-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    <id>https://zade23.github.io/2023/07/10/%E7%AC%AC-108-%E5%9C%BA%E5%8F%8C%E5%91%A8%E8%B5%9B-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</id>
    <published>2023-07-10T09:03:58.000Z</published>
    <updated>2023-07-10T09:26:15.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p>链接：<a href="https://leetcode.cn/contest/biweekly-contest-108/">第 108 场双周赛</a></p><table><thead><tr><th align="left">3 分 - <a href="https://leetcode.cn/problems/longest-alternating-subarray/">最长交替子序列</a></th><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left">4 分 - <a href="https://leetcode.cn/problems/relocate-marbles/">重新放置石块</a></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">5 分 - <a href="https://leetcode.cn/problems/partition-string-into-minimum-beautiful-substrings/">将字符串分割为最少的美丽子字符串</a></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">6 分 - <a href="https://leetcode.cn/problems/number-of-black-blocks/">黑格子的数目</a></td><td align="left"></td><td align="left"></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;链接：&lt;a href=&quot;https://leetcode.cn/contest/biweekly-contest-108/&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>完备区间判断下的二分查找万能模板</title>
    <link href="https://zade23.github.io/2023/07/07/%E5%AE%8C%E5%A4%87%E5%8C%BA%E9%97%B4%E5%88%A4%E6%96%AD%E4%B8%8B%E7%9A%84%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E4%B8%87%E8%83%BD%E6%A8%A1%E6%9D%BF/"/>
    <id>https://zade23.github.io/2023/07/07/%E5%AE%8C%E5%A4%87%E5%8C%BA%E9%97%B4%E5%88%A4%E6%96%AD%E4%B8%8B%E7%9A%84%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E4%B8%87%E8%83%BD%E6%A8%A1%E6%9D%BF/</id>
    <published>2023-07-07T06:57:15.000Z</published>
    <updated>2023-07-25T08:18:53.359Z</updated>
    
    <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>单调数列&#x2F;数组 一定可以用二分；但如果非单调的情况，也有可能存在能够使用二分的情况</p><hr><h2 id="二分模板"><a href="#二分模板" class="headerlink" title="二分模板"></a>二分模板</h2><h3 id="整数二分"><a href="#整数二分" class="headerlink" title="整数二分"></a>整数二分</h3><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 整数二分的模板</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="comment">/*......*/</span>&#125; <span class="comment">// 检查x是否满足某种性质</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    目前发现整数二分的所有情况都可以被下面的两个板子涵盖</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.1.1 区间被划分成 [l, mid] 和 [mid + 1， r]</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.1.2 区间被划分成 [l, mid - 1] 和 [mid, r]</span></span><br><span class="line"><span class="type">int</span> <span class="built_in">bsearch_2</span>(<span class="type">int</span> l, <span class="type">int</span> r) &#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">chedk</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  二分查找</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">x</span>):  <span class="comment"># 判断x是否满足某种性质</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.1.1 区间被划分成 [l, mid] 和 [mid + 1， r]</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bsearch_2</span>(<span class="params">l, r</span>):</span><br><span class="line">    <span class="keyword">while</span> l &lt; r:</span><br><span class="line">        mid = l + r &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (check(mid)):</span><br><span class="line">            r = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.1.2 区间被划分成 [l, mid - 1] 和 [mid, r]</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bsearch_1</span>(<span class="params">l, r</span>):</span><br><span class="line">    <span class="keyword">while</span> l &lt; r:</span><br><span class="line">        mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (check(mid)):</span><br><span class="line">            l = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            r = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> l</span><br></pre></td></tr></table></figure><h3 id="浮点数二分"><a href="#浮点数二分" class="headerlink" title="浮点数二分"></a>浮点数二分</h3><p>只有C++要考虑，高贵的Python不需要考虑。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">bsearch_3</span><span class="params">(<span class="type">double</span> l, <span class="type">double</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line">    <span class="keyword">while</span> (r - l &gt; eps) &#123;</span><br><span class="line">        <span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h2&gt;&lt;p&gt;单调数列&amp;#x2F;数组 一定可以用二分；但如果非单调的情况，也有可能存在能够使用二分的情况&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;二分模板&quot;&gt;</summary>
      
    
    
    
    
    <category term="Algorithm" scheme="https://zade23.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>矩阵变换和空间占用</title>
    <link href="https://zade23.github.io/2023/07/07/%E7%9F%A9%E9%98%B5%E5%8F%98%E6%8D%A2%E5%92%8C%E7%A9%BA%E9%97%B4%E5%8D%A0%E7%94%A8/"/>
    <id>https://zade23.github.io/2023/07/07/%E7%9F%A9%E9%98%B5%E5%8F%98%E6%8D%A2%E5%92%8C%E7%A9%BA%E9%97%B4%E5%8D%A0%E7%94%A8/</id>
    <published>2023-07-07T04:29:35.000Z</published>
    <updated>2023-07-07T04:29:35.187Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Python条件判断的优先级</title>
    <link href="https://zade23.github.io/2023/07/06/Python%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    <id>https://zade23.github.io/2023/07/06/Python%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7/</id>
    <published>2023-07-06T12:53:13.000Z</published>
    <updated>2023-07-06T13:00:54.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>做LeetCode的时候经常能够发现很多基本功不扎实的问题。<br>这一次是在做一道简单题时候忽视的<strong>条件判断</strong>优先级的问题</p><blockquote><p>题目连接：<a href="https://leetcode.cn/problems/count-the-number-of-vowel-strings-in-range">https://leetcode.cn/problems/count-the-number-of-vowel-strings-in-range</a></p></blockquote><h2 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h2><hr><h3 id="问题代码"><a href="#问题代码" class="headerlink" title="问题代码"></a>问题代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">vowelStrings</span>(<span class="params">self, words: <span class="type">List</span>[<span class="built_in">str</span>], left: <span class="built_in">int</span>, right: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        words = words[left : right + <span class="number">1</span>]</span><br><span class="line">        n = <span class="built_in">len</span>(words)</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> words[i][<span class="number">0</span>] == <span class="string">&#x27;a&#x27;</span> <span class="keyword">or</span> words[i][<span class="number">0</span>] == <span class="string">&#x27;e&#x27;</span> <span class="keyword">or</span> words[i][<span class="number">0</span>] == <span class="string">&#x27;i&#x27;</span> <span class="keyword">or</span> words[i][<span class="number">0</span>] == <span class="string">&#x27;o&#x27;</span> <span class="keyword">or</span> words[i][<span class="number">0</span>] == <span class="string">&#x27;u&#x27;</span> <span class="keyword">and</span> words[i][-<span class="number">1</span>] == <span class="string">&#x27;a&#x27;</span> <span class="keyword">or</span> words[i][-<span class="number">1</span>] == <span class="string">&#x27;e&#x27;</span> <span class="keyword">or</span> words[i][-<span class="number">1</span>] == <span class="string">&#x27;i&#x27;</span> <span class="keyword">or</span> words[i][-<span class="number">1</span>] == <span class="string">&#x27;o&#x27;</span> <span class="keyword">or</span> words[i][-<span class="number">1</span>] == <span class="string">&#x27;u&#x27;</span>:</span><br><span class="line">                res += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="正确代码"><a href="#正确代码" class="headerlink" title="正确代码"></a>正确代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">vowelStrings</span>(<span class="params">self, words: <span class="type">List</span>[<span class="built_in">str</span>], left: <span class="built_in">int</span>, right: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        words = words[left : right + <span class="number">1</span>]</span><br><span class="line">        n = <span class="built_in">len</span>(words)</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> words[i][<span class="number">0</span>] == <span class="string">&#x27;a&#x27;</span> <span class="keyword">or</span> words[i][<span class="number">0</span>] == <span class="string">&#x27;e&#x27;</span> <span class="keyword">or</span> words[i][<span class="number">0</span>] == <span class="string">&#x27;i&#x27;</span> <span class="keyword">or</span> words[i][<span class="number">0</span>] == <span class="string">&#x27;o&#x27;</span> <span class="keyword">or</span> words[i][<span class="number">0</span>] == <span class="string">&#x27;u&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> words[i][-<span class="number">1</span>] == <span class="string">&#x27;a&#x27;</span> <span class="keyword">or</span> words[i][-<span class="number">1</span>] == <span class="string">&#x27;e&#x27;</span> <span class="keyword">or</span> words[i][-<span class="number">1</span>] == <span class="string">&#x27;i&#x27;</span> <span class="keyword">or</span> words[i][-<span class="number">1</span>] == <span class="string">&#x27;o&#x27;</span> <span class="keyword">or</span> words[i][-<span class="number">1</span>] == <span class="string">&#x27;u&#x27;</span>:</span><br><span class="line">                    res += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>二者的差别就在如何衔接 <code>or</code> 和 <code>and</code> 之间的关系上。</p><h2 id="具体分析"><a href="#具体分析" class="headerlink" title="具体分析"></a>具体分析</h2><p>分析错误代码的bug：</p><p>在第二段错误代码中，条件判断部分存在问题。以下是有问题的代码片段：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> words[i][<span class="number">0</span>] == <span class="string">&#x27;a&#x27;</span> <span class="keyword">or</span> words[i][<span class="number">0</span>] == <span class="string">&#x27;e&#x27;</span> <span class="keyword">or</span> words[i][<span class="number">0</span>] == <span class="string">&#x27;i&#x27;</span> <span class="keyword">or</span> words[i][<span class="number">0</span>] == <span class="string">&#x27;o&#x27;</span> <span class="keyword">or</span> words[i][<span class="number">0</span>] == <span class="string">&#x27;u&#x27;</span> <span class="keyword">and</span> words[i][-<span class="number">1</span>] == <span class="string">&#x27;a&#x27;</span> <span class="keyword">or</span> words[i][-<span class="number">1</span>] == <span class="string">&#x27;e&#x27;</span> <span class="keyword">or</span> words[i][-<span class="number">1</span>] == <span class="string">&#x27;i&#x27;</span> <span class="keyword">or</span> words[i][-<span class="number">1</span>] == <span class="string">&#x27;o&#x27;</span> <span class="keyword">or</span> words[i][-<span class="number">1</span>] == <span class="string">&#x27;u&#x27;</span>:</span><br><span class="line">    res += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>问题出在逻辑运算符的优先级上。在Python中，<code>and</code> 运算符的优先级高于 <code>or</code> 运算符，因此该条件判断实际上被解释为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> words[i][<span class="number">0</span>] == <span class="string">&#x27;a&#x27;</span> <span class="keyword">or</span> words[i][<span class="number">0</span>] == <span class="string">&#x27;e&#x27;</span> <span class="keyword">or</span> words[i][<span class="number">0</span>] == <span class="string">&#x27;i&#x27;</span> <span class="keyword">or</span> words[i][<span class="number">0</span>] == <span class="string">&#x27;o&#x27;</span> <span class="keyword">or</span> (words[i][<span class="number">0</span>] == <span class="string">&#x27;u&#x27;</span> <span class="keyword">and</span> words[i][-<span class="number">1</span>] == <span class="string">&#x27;a&#x27;</span>) <span class="keyword">or</span> words[i][-<span class="number">1</span>] == <span class="string">&#x27;e&#x27;</span> <span class="keyword">or</span> words[i][-<span class="number">1</span>] == <span class="string">&#x27;i&#x27;</span> <span class="keyword">or</span> words[i][-<span class="number">1</span>] == <span class="string">&#x27;o&#x27;</span> <span class="keyword">or</span> words[i][-<span class="number">1</span>] == <span class="string">&#x27;u&#x27;</span>:</span><br><span class="line">    res += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>由于 <code>or</code> 运算符的短路特性，只要 <code>words[i][0]</code> 的首字母为元音字母之一，整个条件判断就会被认为是True，导致res增加。而第二个部分 <code>words[i][-1] == &#39;a&#39;</code>、<code>words[i][-1] == &#39;e&#39;</code>等都是单独的条件，不会影响整个条件判断的结果。</p><p>修正该bug的方法是使用括号明确指定条件的分组，确保逻辑关系正确。以下是修正后的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (words[i][<span class="number">0</span>] == <span class="string">&#x27;a&#x27;</span> <span class="keyword">or</span> words[i][<span class="number">0</span>] == <span class="string">&#x27;e&#x27;</span> <span class="keyword">or</span> words[i][<span class="number">0</span>] == <span class="string">&#x27;i&#x27;</span> <span class="keyword">or</span> words[i][<span class="number">0</span>] == <span class="string">&#x27;o&#x27;</span> <span class="keyword">or</span> words[i][<span class="number">0</span>] == <span class="string">&#x27;u&#x27;</span>) <span class="keyword">and</span> (words[i][-<span class="number">1</span>] == <span class="string">&#x27;a&#x27;</span> <span class="keyword">or</span> words[i][-<span class="number">1</span>] == <span class="string">&#x27;e&#x27;</span> <span class="keyword">or</span> words[i][-<span class="number">1</span>] == <span class="string">&#x27;i&#x27;</span> <span class="keyword">or</span> words[i][-<span class="number">1</span>] == <span class="string">&#x27;o&#x27;</span> <span class="keyword">or</span> words[i][-<span class="number">1</span>] == <span class="string">&#x27;u&#x27;</span>):</span><br><span class="line">    res += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>这样修改后，条件判断会首先检查首字母是否为元音字母，然后再检查末尾字母是否为元音字母，两个条件都满足时才会增加res的值。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;做LeetCode的时候经常能够发现很多基本功不扎实的问题。&lt;br&gt;这一次是在做一道简单题时候忽视的&lt;strong&gt;条件判断&lt;/strong</summary>
      
    
    
    
    
    <category term="Algorithm" scheme="https://zade23.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>排列公式和组合公式的详细证明</title>
    <link href="https://zade23.github.io/2023/05/19/%E6%8E%92%E5%88%97%E5%85%AC%E5%BC%8F%E5%92%8C%E7%BB%84%E5%90%88%E5%85%AC%E5%BC%8F%E7%9A%84%E8%AF%A6%E7%BB%86%E8%AF%81%E6%98%8E/"/>
    <id>https://zade23.github.io/2023/05/19/%E6%8E%92%E5%88%97%E5%85%AC%E5%BC%8F%E5%92%8C%E7%BB%84%E5%90%88%E5%85%AC%E5%BC%8F%E7%9A%84%E8%AF%A6%E7%BB%86%E8%AF%81%E6%98%8E/</id>
    <published>2023-05-19T07:08:26.000Z</published>
    <updated>2023-05-19T09:03:09.086Z</updated>
    
    <content type="html"><![CDATA[<p>写文章的原因：LeetCode上又一次遇到了</p><h2 id="公式表达"><a href="#公式表达" class="headerlink" title="公式表达"></a>公式表达</h2><h2 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h2><ul><li><a href="https://youtu.be/VZkTphCESqQ">【数学排列组合】 P&amp;C 5S 公式证明</a></li><li><a href="https://www.bilibili.com/video/BV1bW41117Na/?share_source=copy_web&vd_source=48383e849d4fc23ac2e38278a3df1b87">【数学 《排列组合 公式推导》 师大（白某烁请查收）】 </a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;写文章的原因：LeetCode上又一次遇到了&lt;/p&gt;
&lt;h2 id=&quot;公式表达&quot;&gt;&lt;a href=&quot;#公式表达&quot; class=&quot;headerlink&quot; title=&quot;公式表达&quot;&gt;&lt;/a&gt;公式表达&lt;/h2&gt;&lt;h2 id=&quot;相关参考&quot;&gt;&lt;a href=&quot;#相关参考&quot; class</summary>
      
    
    
    
    <category term="数学" scheme="https://zade23.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="LeetCode" scheme="https://zade23.github.io/tags/LeetCode/"/>
    
    <category term="Algorithm" scheme="https://zade23.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>your-first-post</title>
    <link href="https://zade23.github.io/2023/05/16/your-first-post/"/>
    <id>https://zade23.github.io/2023/05/16/your-first-post/</id>
    <published>2023-05-16T09:45:58.000Z</published>
    <updated>2023-05-19T07:20:14.764Z</updated>
    
    
    
    
    <category term="whatever" scheme="https://zade23.github.io/categories/whatever/"/>
    
    
    <category term="test" scheme="https://zade23.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zade23.github.io/2023/05/16/hello-world/"/>
    <id>https://zade23.github.io/2023/05/16/hello-world/</id>
    <published>2023-05-16T09:45:58.000Z</published>
    <updated>2023-05-19T07:20:20.118Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="whatever" scheme="https://zade23.github.io/categories/whatever/"/>
    
    
    <category term="Hexo" scheme="https://zade23.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
